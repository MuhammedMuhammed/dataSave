using Gardinia.GardModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Data.OleDb;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Gardinia
{
    public partial class DataView : Form
    {
        double x1 = 10;
        double y1 = 30;
        double total1 = 0;
        double x2 = 80;
        double total2 = 0;
        double x3 = 100;
        double total3 = 0;
        public static readonly List<string> ImageExtensions = new List<string> { ".jpg", ".jpeg", ".bmp", ".gif", ".png" };
        public static readonly List<string> ExcelExtensions = new List<string> { ".xls", ".xlsx", ".csv" };

        protected void claculation()
        {
            double total1 = (x1 / y1) * 100;

            double total2 = (total1 / x2) * 100;
            double total3 = (total2 / x3) * 100;
        }
        public DataView()
        {
            InitializeComponent();
            if (Sessions.SessionData.isAdmin != "True")
            {
                foreach (TabPage tabPage in Projectsavings.TabPages)
                {

                    foreach (Control ctrl in metroTabPage3.Controls)
                    {
                        if (ctrl != metroButton21)
                        {
                            ctrl.Enabled = false;
                        }
                    }
                }
            }
            this.MaximizeBox = false;
        }
        private bool datechanged = false;
        private bool datechanged2 = false;
        private bool datechanged3 = false;

        string ProjectCode = "";
        string imgloc = "";
        string pdfloc = "";
        string report4loc = "";
        string report3loc = "";
        string report2loc = "";
        string report1loc = "";
        BuildData bd = new BuildData();
        PhraseTable PT = new PhraseTable();

        nets PD = new nets();
        //ProjectReports PR = new ProjectReports();
        GardModels.ProjectReports PR = new GardModels.ProjectReports();
        static string myconnecting = "Provider=Microsoft.ACE.OleDb.12.0;Data Source=" + Directory.GetCurrentDirectory() + "\\ArchDB.accdb;Persist Security Info=false";
        private Button senderbtns;

        private void DataView_Load(object sender, EventArgs e)
        {
            this.KeyDown += new KeyEventHandler(OnKeyDown);

            AddDataToDropDownList();
            MegaProjectFinancialStatement();
            getAllDataInGridView1();

            PhraseTable PTt = new PhraseTable();
            PTt.megaProjName = megaProjectNameText.Text;
            DataSet DSPT = PTt.selectData(PTt);
            foreach (DataRow DRPT in DSPT.Tables[0].Rows)
            {
                listBox1.Items.Add(DRPT["phrasesName"].ToString());
                listBox2.Items.Add(DRPT["phrasesName"].ToString());
                listBox3.Items.Add(DRPT["phrasesName"].ToString());
                listBox4.Items.Add(DRPT["phrasesName"].ToString());

            }

            // TODO: This line of code loads data into the 'projectReports.__ProjectReports' table. You can move, or remove it, as needed.

            //dataGridView1.DataSource = dt;
            megaProjectNameText.Text = Sessions.SessionData.megaProjectName;
        }

        public void tabUse()
        {
            KeyEventArgs e;
            
        }
        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {
            
        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }
        private void button1_Click(object sender, EventArgs e)
        {

            byte[] img = null;
            string[] BuildstextBoxesTexts = new string[] { textBox3.Text, textBox7.Text, pdfloc };
            string[] projectsTexts = new string[] { textBox5.Text, textBox8.Text, textBox12.Text };
            string[] projectsButton = new string[] { metroButton3.Text, metroButton4.Text, metroButton5.Text, metroButton6.Text };
            
            if (imgloc != null && imgloc != "")
            {
                FileStream fs = new FileStream(imgloc, FileMode.Open, FileAccess.Read);
                BinaryReader br = new BinaryReader(fs);

                img = br.ReadBytes((int)fs.Length);
            }
            else
            {
                //img = (byte[])"
            }


            try { 
            //bd.implementerCompany = "8";
            bd.projectName = textBox9.Text;
            bd.projectOwner = textBox5.Text;
            bd.projectrecordingDate = DateTime.Now;
            bd.implementerCompany = textBox8.Text /*textBox4.Text*/;
            bd.projectConsultative = textBox4.Text;
            bd.startingProjectDate = metroDateTime1.Value.Date;
            bd.EndingOfContractorDate = metroDateTime3.Value.Date;
            bd.LastTimeForEndingProject = DateTime.Now;
            //bd.Sandreport = textBox5.Text;
            bd.periodToImplementProject = textBox12.Text;
            bd.AddedPeriodToProject = textBox1.Text;
            bd.projectPhrase = BuildPhrases.Text;
            bd.BuildUnitsFrom = int.Parse(textBox3.Text.ToString());
            bd.BuildUnitsTo = int.Parse(textBox13.Text.ToString());
            //bd.BUildedDateAndTime = DateTime.Now;
            bd.BuildReport = metroButton1.Text /*textBox4.Text*/;
            bd.ContractCode = textBox7.Text;
            bd.Image = label6.Text;
            bd.projectName = textBox9.Text;
            bd.projectIndexation = metroButton3.Text /*textBox4.Text*/;
            bd.locationOfCheckingDrillingBottom = metroButton6.Text;
            bd.receiptOfTheSite = metroButton5.Text;
            bd.projectNotes = metroButton23.Text;
            bd.percentageOfImplementation = 11;
            bd.percentageOfImplementationDetails = metroButton27.Text;
            bd.DurationProgram = metroButton26.Text;
            bd.notices = metroButton30.Text;
            bd.contractValue = !String.IsNullOrEmpty(textBox25.Text) ? double.Parse(textBox25.Text) : 0.0;
            bd.FinalClosing = !String.IsNullOrEmpty(textBox27.Text) ? double.Parse(textBox27.Text) : 0.0;
            bd.contractValueFile = metroButton32.Text;
            bd.FinalClosingFile = metroButton38.Text;
            bd.lastExactractFile = metroButton37.Text;
            bd.Savings = metroButton36.Text;
            bd.Receipts = metroButton40.Text;
            bd.Appropriations = metroButton46.Text;
            bd.SiteOrders = metroButton45.Text;
            bd.ManagementMails = metroButton44.Text;
            bd.Netbudget = metroButton52.Text;
            bd.ConstructionSafetyReport = metroButton50.Text;
            bd.ExploitationReductionandCancellationNotes = metroButton56.Text;
            bd.ProjectDataTypes = metroComboBox1.Text;
            bd.megaProjectName = megaProjectNameText.Text;
            bd.lastExactract = !String.IsNullOrEmpty(textBox26.Text) ? double.Parse(textBox26.Text) : 0.0;
            bd.Division = !String.IsNullOrEmpty(textBox30.Text) ? double.Parse(textBox30.Text) : 0.0;
            bd.savingsValue = !String.IsNullOrEmpty(textBox28.Text) ? double.Parse(textBox28.Text) : 0.0;

            bd.percentageOfImplementationAccordingToFinancialStatement = textBox2.Text == "" || textBox2.Text == null ? 0.0 : (double?)double.Parse(textBox2.Text);
            bd.percentageOfImplementationAccordingToPhrase = textBox6.Text == "" || textBox6.Text == null ? 0.0 : (double?)double.Parse(textBox6.Text);
            bd.TotalDeductionsValues = textBox24.Text == "" || textBox24.Text == null ? 0.0 : (double?)double.Parse(textBox24.Text);
            bd.PhraseID = PT.selectID(megaProjectNameText.Text, BuildPhrases.Text);
            bool success = bd.Insert(bd);
            if (success == true)
            {
                MessageBox.Show("New Project Added");
                
            }
            else
            {
                MessageBox.Show("there is a problem");
            }
            }catch(Exception ex)
            {
                }
            DataTable dt2 = PD.Select();
            OleDbConnection conn = new OleDbConnection(myconnecting);
            datechanged = false;
            datechanged2 = false;
            datechanged3 = false;

            // اضافة المسحوبات
            if (metroGrid2.Rows.Count > 0)
            {
                if (!String.IsNullOrEmpty(textBox7.Text) && !String.IsNullOrWhiteSpace(textBox7.Text))
                {
                    OleDbConnection Dedconn = new OleDbConnection(myconnecting);
                    foreach (DataGridViewRow dt in metroGrid2.Rows)
                    {
                        //string querySelect = "Select count(*) where "
                        //string querySelectcount="Select count(*) where "
                        try
                        {
                            bool isSuccess = false;
                            string query = "insert Into deductionTable (type,amount,PricePerUnit" +
                                ",totalValue,Importer,Deduction,validDeduction,confirmedDeductionVal,DeductionPrice" +
                                ",notes,ProjectCode)Values('" + dt.Cells["typeN"].Value
                                    + "','" + double.Parse(dt.Cells["amountN"].Value.ToString()) + "','" +
                                double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()) + "','" +
                                double.Parse(dt.Cells["amountN"].Value.ToString()) * double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()
                                ) + "','" + dt.Cells["importerN"].
                                Value + "','" + double.Parse(dt.Cells["deductionN"].Value.ToString())
                                + "','" + double.Parse(dt.Cells["deductionN"].Value.ToString()) * double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()
                                ) + "','" + double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString()) + "','" + double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()) * double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString()) + "','" + dt.Cells["notesN"]
                                .Value + "','" + textBox7.Text + "')";

                            OleDbCommand cmd = new OleDbCommand(query, Dedconn);
                            Dedconn.Open();

                            int rows = cmd.ExecuteNonQuery();
                            if (rows > 0)
                            {
                                isSuccess = true;
                            }
                            else
                            {
                                MessageBox.Show("لم يتم اضافة المسحوبات");
                                isSuccess = false;
                            }
                        }
                        catch (Exception ex)
                        {
                            //var st = new StackTrace(ex, true);

                            //// Get the top stack frame
                            //var frame = st.GetFrame(st.FrameCount - 1);
                            //// Get the line number from the stack frame
                            //var line = frame.GetFileLineNumber();
                            //MessageBox.Show(ex.Message, line.ToString());
                        }
                        finally
                        {

                            Dedconn.Close();
                        }
                    }
                }
            }
            this.Refresh();

        }
        public void CreateMyDateTimePicker()
        {
            // Create a new DateTimePicker control and initialize it.
            //DateTimePicker dateTimePicker1 = new DateTimePicker();

            // Set the MinDate and MaxDate.
            metroDateTime1.MinDate = new DateTime(1985, 6, 20);
            metroDateTime1.MaxDate = DateTime.Today;

            // Set the CustomFormat string.
            metroDateTime1.CustomFormat = "MMMM dd, yyyy - dddd";
            metroDateTime1.Format = DateTimePickerFormat.Custom;

            // Show the CheckBox and display the control as an up-down control.
            metroDateTime1.ShowCheckBox = true;
            metroDateTime1.ShowUpDown = true;
        }

        private void pictureBox1_Click_1(object sender, EventArgs e)
        {
            Application.Exit();
        }
        private void clear()
        {
            //BuildPhrases.Clear();
            textBox3.Clear();
            metroButton1.Text = "رفع ملف التقرير";
            textBox7.Clear();
        }

        private void textBox4_KeyPress_1(object sender, KeyPressEventArgs e)
        {

            if (!char.IsNumber(e.KeyChar)
            && ((Keys)e.KeyChar != Keys.Back)
            && (e.KeyChar != '.'))
                e.Handled = true;

            if (e.KeyChar == '.' && Text.IndexOf('.') > 0)
                e.Handled = true;

            base.OnKeyPress(e);

        }
        private void textBox3_KeyPress_1(object sender, KeyPressEventArgs e)
        {

            if (!char.IsNumber(e.KeyChar)
            && ((Keys)e.KeyChar != Keys.Back)
            && (e.KeyChar != '.'))
                e.Handled = true;

            //if (e.KeyChar == ',' && Text.IndexOf(',') > 0)
            //    e.Handled = true;

            base.OnKeyPress(e);

        }

        private void dataGridView1_RowHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            int rowIndex = e.RowIndex;

            //textBox1.Text = dataGridView1.Rows[rowIndex].Cells[0].Value.ToString();
            //textBox3.Text = dataGridView1.Rows[rowIndex].Cells[1].Value.ToString();
            //textBox7.Text = dataGridView1.Rows[rowIndex].Cells[3].Value.ToString();
            //metroButton1.Text = dataGridView1.Rows[rowIndex].Cells[2].Value.ToString();
            //BuildPhrases.Text = dataGridView1.Rows[rowIndex].Cells[5].Value.ToString();
            //ProjectNameInBuildsTable.Text = dataGridView1.Rows[rowIndex].Cells[6].Value.ToString();
            //byte[] imagebytes =(byte[]) dataGridView1.Rows[rowIndex].Cells[4].Value;
            //   byte[] imagebytes = System.Text.Encoding.Unicode.GetBytes();
            //MemoryStream ms = new MemoryStream(imagebytes);
            //pictureBox2.Image = new Bitmap(ms);
            //imgloc = dataGridView1.Rows[rowIndex].Cells[4].Value.ToString();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            byte[] img = null;
            string[] BuildstextBoxesTexts = new string[] { textBox3.Text, textBox7.Text, pdfloc };
            string[] projectsTexts = new string[] { textBox5.Text, textBox8.Text, textBox4.Text, textBox9.Text };
            string[] projectsButton = new string[] { metroButton3.Text, metroButton4.Text, metroButton5.Text, metroButton6.Text };
            try
            {
                if (imgloc != "")
                {

                    FileStream fs = new FileStream(imgloc, FileMode.Open, FileAccess.Read);
                    BinaryReader br = new BinaryReader(fs);
                    img = br.ReadBytes((int)fs.Length);
                    //bd.Image = label6.Text;
                }


                //bd.BuildID = int.Parse(textBox1.Text);

                //bd.BUildedDateAndTime = DateTime.Now;
                bd.ContractCode = String.IsNullOrEmpty(textBox7.Text) ? null : textBox7.Text;
                bd.projectName = String.IsNullOrEmpty(textBox9.Text) ? null : textBox9.Text;
                bd.projectOwner = String.IsNullOrEmpty(textBox5.Text) ? null : textBox5.Text; ;
                bd.projectrecordingDate = DateTime.Now;
                bd.implementerCompany = String.IsNullOrEmpty(textBox8.Text) ? null : textBox8.Text; /*textBox4.Text*/;
                bd.projectConsultative = String.IsNullOrEmpty(textBox4.Text) ? null : textBox4.Text;
                bd.startingProjectDate = datechanged ? (DateTime?)metroDateTime1.Value.Date : null;
                bd.EndingOfContractorDate = datechanged2 ? (DateTime?)metroDateTime3.Value.Date : null;
                bd.LastTimeForEndingProject = datechanged3 ? (DateTime?)metroDateTime4.Value.Date : null;

                //bd.Sandreport = textBox5.Text;
                bd.periodToImplementProject = String.IsNullOrEmpty(textBox12.Text) ? null : textBox12.Text;
                bd.projectPhrase = String.IsNullOrEmpty(BuildPhrases.Text) ? null : BuildPhrases.Text;
                bd.BuildUnitsFrom = textBox3.Text == "" ? null : (int?)int.Parse(textBox3.Text);
                bd.BuildUnitsTo = String.IsNullOrEmpty(textBox13.Text) ? null : (int?)int.Parse(textBox13.Text);
                //bd.BUildedDateAndTime = DateTime.Now;
                bd.Image = label6.Text == "صورة المشروع" || label6.Text == "" ? null : label6.Text;
                bd.DurationProgram = metroButton26.Text == "البرنامج الزمني" || metroButton26.Text == "" ? null : metroButton26.Text;
                bd.projectIndexation = metroButton3.Text == "مقايسة المشروع" || metroButton3.Text == "" ? null : metroButton3.Text /*textBox4.Text*/;
                bd.locationOfCheckingDrillingBottom = metroButton6.Text == "مجضر معاينة قاع الحفر " || metroButton6.Text == "" ? null : metroButton6.Text;
                bd.receiptOfTheSite = metroButton5.Text == "محضر استلام الموقع" || metroButton5.Text == "" ? null : metroButton5.Text;
                bd.projectNotes = metroButton23.Text == "ملاحظات المشروع" || metroButton23.Text == "" ? null : metroButton23.Text;
                bd.BuildReport = metroButton1.Text == "حصر المشروع" || metroButton1.Text == "" ? null : metroButton1.Text;
                bd.notices = metroButton30.Text == "الاخطار" || metroButton30.Text == "" ? null : metroButton30.Text;
                bd.contractValue = textBox25.Text == "" ? null : (double?)double.Parse(textBox25.Text);
                bd.FinalClosing = textBox27.Text == "" ? null : (double?)double.Parse(textBox27.Text);
                bd.lastExactract = textBox26.Text == "" ? null : (double?)double.Parse(textBox26.Text);
                bd.Division = textBox30.Text == "" ? null : (double?)double.Parse(textBox30.Text);
                bd.savingsValue = textBox28.Text == "" ? null : (double?)double.Parse(textBox28.Text);

                bd.contractValueFile = metroButton32.Text == "القيمة التعاقدية" || metroButton32.Text == "" ? null : metroButton32.Text;
                bd.FinalClosingFile = metroButton38.Text == "الختامي المنتظر" || metroButton38.Text == "" ? null : metroButton38.Text;
                bd.lastExactractFile = metroButton37.Text == "اخر مستخلص" || metroButton37.Text == "" ? null : metroButton37.Text;
                bd.Savings = metroButton36.Text == "الوفر" || metroButton36.Text == "" ? null : metroButton36.Text;
                bd.Receipts = metroButton40.Text == "طلبات الاستلام" || metroButton40.Text == "" ? null : metroButton40.Text;
                bd.Appropriations = metroButton46.Text == "الاعتمادات المخصصة" || metroButton46.Text == "" ? null : metroButton46.Text;
                bd.SiteOrders = metroButton45.Text == "اوامر الموقع" || metroButton45.Text == "" ? null : metroButton45.Text;
                bd.ManagementMails = metroButton44.Text == "جوابات الادارة" || metroButton44.Text == "" ? null : metroButton44.Text;
                bd.Netbudget = metroButton52.Text == "الميزانية الشبكية" || metroButton52.Text == "" ? null : metroButton52.Text;
                bd.ConstructionSafetyReport = metroButton50.Text == "تقرير السلامة الانشائية" || metroButton50.Text == "" ? null : metroButton50.Text;
                bd.ExploitationReductionandCancellationNotes = metroButton56.Text == "مذكرات التجاوز و المخفض و الملغى" || metroButton56.Text == "" ? null : metroButton56.Text;
                bd.ProjectDataTypes = metroComboBox1.Text == "" ? null : metroComboBox1.Text;
                bd.projectImages = projectImages.Text == "صور المشروع" || projectImages.Text == "" ? null : projectImages.Text;
                bd.TotalDeductionsValues = textBox24.Text == "" || textBox24.Text == null ? 0.0 : (double?)double.Parse(textBox24.Text);
                bd.PhraseID =String.IsNullOrEmpty(BuildPhrases.Text) ? null :(int?) PT.selectID(Sessions.SessionData.megaProjectName, (String.IsNullOrEmpty(BuildPhrases.Text) ? null : BuildPhrases.Text));

                bool success = bd.Update(bd);
                if (success == true)
                {

                    MessageBox.Show("data updated");
                    DataTable dt = bd.Select();
                    //dataGridView1.DataSource = dt;

                }
                else
                {
                    MessageBox.Show("Failed to update data. Try again");
                }
                datechanged = false;
                datechanged2 = false;
                datechanged3 = false;
                this.Refresh();
            }
            catch (Exception ex) {
                MessageBox.Show(ex.Message);      
            }
            //if (metroGrid1.Rows.Count > 0)
            //{
            //    if (!String.IsNullOrEmpty(textBox7.Text) && !String.IsNullOrWhiteSpace(textBox7.Text))
            //    {
            //        OleDbConnection Dedconn = new OleDbConnection(myconnecting);
            //        foreach (DataGridViewRow dt in metroGrid2.Rows)
            //        {
            //            //string querySelect = "Select count(*) where "
            //            //string querySelectcount="Select count(*) where "
            //            try
            //            {
            //                bool isSuccess = false;
            //                string query = "update deductionTable set type=IIF(IsNull(@type),[type],@type)" +
            //                    ",amount=IIF(IsNull(@amount),[amount],@amunt)" +
            //                    ",PricePerUnit=IIF(IsNull(@PricePerUnit),[PricePerUnit],@PricePerUnit)" +
            //                    ",totalValue=IIF(IsNull(@totalValue),[totalValue],@totalValue)" +
            //                    ",Importer=IIF(IsNull(@Importer),[Importer],@Importer)" +
            //                    ",Deduction=IIF(IsNull(@Deduction),[Deduction],@Deduction)" +
            //                    ",validDeduction=IIF(IsNull(@validDeduction),[validDeduction],@validDeduction)" +
            //                    ",confirmedDeductionVal=IIF(IsNull(@confirmedDeductionVal),[confirmedDeductionVal],@confirmedDeductionVal)" +
            //                    ",DeductionPrice=IIF(IsNull(@DeductionPrice),[DeductionPrice],@DeductionPrice)" +
            //                    ",notes=IIF(IsNull(@notes),[notes],@notes)" +
            //                    "where ProjectCode='"+textBox7.Text+"'";
            //                //)Values('" + dt.Cells["typeN"].Value
            //                //        + "','" + double.Parse(dt.Cells["amountN"].Value.ToString()) + "','" +
            //                //    double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()) + "','" +
            //                //    double.Parse(dt.Cells["amountN"].Value.ToString()) * double.Parse(dt.Cells["priceOfUnitN"].Value.ToString()
            //                //    ) + "','" + dt.Cells["importerN"].
            //                //    Value + "','" + double.Parse(dt.Cells["deductionN"].Value.ToString())
            //                //    + "','" + double.Parse(dt.Cells["deductionN"].Value.ToString()) * double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()
            //                //    ) + "','" + double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString()) + "','" + double.Parse(dt.Cells["PricePerUnitN"].Value.ToString()) * double.Parse(dt.Cells["ConfirmedDeduction"].Value.ToString()) + "','" + dt.Cells["notesN"]
            //                //    .Value + "','" + textBox7.Text + "')";

            //                OleDbCommand cmd = new OleDbCommand(query, Dedconn);
            //                Dedconn.Open();

            //                int rows = cmd.ExecuteNonQuery();
            //                if (rows > 0)
            //                {
            //                    isSuccess = true;
            //                }
            //                else
            //                {
            //                    isSuccess = false;
            //                }
            //            }
            //            catch (Exception ex)
            //            {
            //                var st = new StackTrace(ex, true);

            //                // Get the top stack frame
            //                var frame = st.GetFrame(st.FrameCount - 1);
            //                // Get the line number from the stack frame
            //                var line = frame.GetFileLineNumber();
            //                MessageBox.Show(ex.Message, line.ToString());
            //            }
            //            finally
            //            {

            //                Dedconn.Close();
            //            }
            //}
            //}
            //}
        }

        private void button4_Click(object sender, EventArgs e)
        {
            clear();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            bd.ContractCode = textBox1.Text;
            bool success = bd.Delete(bd);
            if (success == true)
            {
                MessageBox.Show("Build data Deleted");
                DataTable dt = bd.Select();
                //dataGridView1.DataSource = dt;
                clear();
            }
            else
            {
                MessageBox.Show("Failed to add new Build. Try again");
            }

        }

        public void Select(String Keyword)
        {
            OleDbConnection conn = new OleDbConnection(myconnecting);
            string sql = "select * From BuildsMainTable where ContractCode LIKE '%" + Keyword + "%' or projectPhrase LIKE '%" + Keyword + "%'or projectName LIKE '%" + Keyword + "'%";
            string sqlPD = "select * From nets where projectName LIKE '%" + Keyword + "%'";
            string sqlPR = "select * From ProjectReports where projectName LIKE '%" + Keyword + "%'or ContractCode LIKE '%" + Keyword + "%'";

            OleDbDataAdapter SA = new OleDbDataAdapter(sql, conn);
            OleDbDataAdapter SAPD = new OleDbDataAdapter(sqlPD, conn);
            OleDbDataAdapter SAPR = new OleDbDataAdapter(sqlPR, conn);

            DataTable dt = new DataTable();
            DataTable dtPD = new DataTable();
            DataTable dtPR = new DataTable();

            SA.Fill(dt);
            SAPD.Fill(dtPD);
            SAPR.Fill(dtPR);

            //dataGridView1.DataSource = dt;
            //metroGrid2.DataSource = dtPD;
            //metroGrid1.DataSource = dtPR;

        }




        private void uploadimages_Click(object sender, EventArgs e)
        {
            //try
            //{
            OpenFileDialog opnfd = new OpenFileDialog();
            opnfd.Filter = "Image Files (*.jpg;*.jpeg;.*.gif;)|*.jpg;*.jpeg;.*.gif";
            opnfd.Title = "Select Build Image";
            string projectimagesFolder = Directory.GetCurrentDirectory() + "\\images";
            string projectImage = Directory.GetCurrentDirectory() + "\\images\\ProjectViewImage";

            if (opnfd.ShowDialog() == DialogResult.OK)
            {
                pictureBox2.Image = new Bitmap(opnfd.FileName);
                imgloc = opnfd.FileName;
                pictureBox2.ImageLocation = imgloc;
                label6.Text = opnfd.FileName;
                if (!Directory.Exists(projectimagesFolder))
                {
                    if (!Directory.Exists(projectImage))
                    {
                        Directory.CreateDirectory(projectImage);
                        string[] f = imgloc.Split('\\');
                        string fn = f[(f.Length) - 1];

                        string ViewImgPath = Path.Combine(projectImage, fn);

                        MessageBox.Show(",,,,," + fn);
                        File.Copy(imgloc, ViewImgPath, true);

                    }
                    else
                    {
                        string[] f = imgloc.Split('\\');
                        string fn = f[(f.Length) - 1];

                        string ViewImgPath = String.Format(projectImage + "\\{0}", fn);
                        //string ViewImgPath = Path.Combine(projectImage, fn);
                        MessageBox.Show(",,,,," + fn);
                        MessageBox.Show(projectImage);

                        MessageBox.Show(",,,,," + fn);
                        File.Copy(imgloc, ViewImgPath, true);

                    }
                }
                else
                {
                    if (!Directory.Exists(projectImage))
                    {
                        Directory.CreateDirectory(projectImage);
                        string[] f = imgloc.Split('\\');
                        string fn = f[(f.Length) - 1];

                        string ViewImgPath = Path.Combine(projectImage, fn);

                        MessageBox.Show(",,,,," + fn);
                        File.Copy(imgloc, ViewImgPath, true);

                    }
                    else
                    {
                        string[] f = imgloc.Split('\\');
                        string fn = f[(f.Length) - 1];

                        string ViewImgPath = String.Format(projectImage + "\\{0}", fn);
                        //string ViewImgPath = Path.Combine(projectImage, fn);
                        MessageBox.Show(",,,,," + fn);
                        MessageBox.Show(projectImage);

                        MessageBox.Show(",,,,," + fn);
                        File.Copy(imgloc, ViewImgPath, true);

                    }
                }

            }

            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message);
            //}
        }

        private void button5_Click(object sender, EventArgs e)
        {

            BuildsData buildsData = new BuildsData((sender as Button).Text);
            buildsData.Location = this.Location;
            buildsData.StartPosition = FormStartPosition.Manual;
            buildsData.FormClosing += delegate { this.Show(); };
            buildsData.Show();
            this.Hide();
        }

        private void button1_Click_1(object sender, EventArgs e)
        {

        }

        private void metroButton1_Click(object sender, EventArgs e)
        {
            filesPrep(((Button)sender).Text, sender);

        }

        private void metroButton2_Click(object sender, EventArgs e)
        {
            //if (metroButton1.Text != "حصر المشروع" && metroButton1.Text != "")
            //{
            //    Excel excel = new Excel(metroButton1.Text);
            //    excel.Show();
            //}
        }
        private void metroButton3_Click(object sender, EventArgs e)
        {
            filesPrep(((Button)sender).Text, sender);
        }
        private void metroButton7_Click(object sender, EventArgs e)
        {
            FileRea(metroButton3.Text, "مقايسة المشروع");
        }

        private void metroButton4_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "تقرير التربة";
            filesPrep(RequestedFolder, sender);
            //FileUpload(metroButton4, metroButton4.Text, "تقرير التربة");
            //OpenFileDialog ofdMultiselect = new OpenFileDialog();
            //ofdMultiselect.Multiselect = true;
            //ofdMultiselect.Filter = "select needed Files |*.jpg; *.png; *.pdf";
            //ofdMultiselect.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            //if (ofdMultiselect.ShowDialog() == DialogResult.OK)
            //{
            //    string sqlInsertingQuery = "Insert Into " + "ProjectReports" + "(dustReport,ContractCode,recordingdateOnDB)Values('" + metroButton4.Text + "','" + textBox7.Text + "','" + DateTime.Now + "')";
            //    MultiSelect(metroButton4, metroButton4.Text, "تقرير التربة", ofdMultiselect, "AsBuiltTable", sqlInsertingQuery);
            //    string selectInBT = "Select COUNT(*) from BuildsMainTable where ContractCode Like'" + textBox7.Text + "'";
            //    //OleDbConnection conn = new OleDbConnection(myconnecting);

            //    ////OleDbConnection conn = new OleDbConnection(myconnecting);
            //    //DataTable dt32 = new DataTable();
            //    ////OleDbCommand OleDbCommand PD = new OleDbCommand (selectInPD, conn);
            //    //OleDbCommand OleDbCommand BT = new OleDbCommand (selectInBT, conn);

            //    ////OleDbDataAdapter OleDbDataAdapterPD = new OleDbDataAdapter(OleDbCommand PD);
            //    //OleDbDataAdapter OleDbDataAdapterBT = new OleDbDataAdapter(OleDbCommand BT);

            //    //conn.Open();
            //    ////int rowsPD = (int)OleDbCommand PD.ExecuteScalar();
            //    //int rowsBT = (int)OleDbCommand BT.ExecuteScalar();

            //    ////if (rowsPD > 0)
            //    ////{
            //    //if (rowsBT > 0)
            //    //{

            //    //    //bd.implementerCompany = "8";

            //    //    PR.projectName = textBox9.Text;

            //    //    PR.ContractCode = textBox7.Text;
            //    //    //bd.BUildedDateAndTime = DateTime.Now;
            //    //    //PR./*Image*/ = img;
            //    //    PR.recordingdateOnDB = DateTime.Now;
            //    //    PR.dustReport = metroButton4.Text;
            //    //    //bd.Sandreport = textBox5.Text;

            //    //bool successPR = PR.Insert(PR);
            //    //    if (successPR == true)
            //    //    {
            //    //        MessageBox.Show("New Dust Report Added");
            //    //        clear();
            //    //    }
            //    //    //else
            //    //    //{
            //    //    //    MessageBox.Show("Failed to add new Build. Try again");
            //    //    //}
            //    //    //DataTable dt = bd.Select();
            //    //    //dataGridView1.DataSource = dt;
            //    //}
            //    //else
            //    //{
            //    //    MessageBox.Show("المنشاء غير مسجلة");

            //    //}
            //    ////}
            //    ////else
            //    ////{
            //    ////    MessageBox.Show("المشروع غير مسجل");

            //    ////}
            //    //DataTable dt4 = PR.Select();
            //}

        }

        private void metroButton8_Click(object sender, EventArgs e)
        {


            //FileRea(metroButton4.Text, "تقرير التربة");
        }

        private void metroButton5_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "محضر استلام الموقع";
            filesPrep(RequestedFolder, sender);

            //FileUpload(metroButton5, metroButton5.Text, "محضر استلام الموقع");
        }

        private void metroButton9_Click(object sender, EventArgs e)
        {

            FileRea(metroButton5.Text, "محضر استلام الموقع");
        }


        private void textBox12_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!(Char.IsDigit(e.KeyChar) || (e.KeyChar == (char)Keys.Back)))
            { e.Handled = true; }

        }


        private void metroButton6_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "محاضر معاينة قاع الحفر";
            filesPrep(RequestedFolder, sender);
            //FileUpload(metroButton6, metroButton6.Text, "محاضر معاينة قاع الحفر");
        }

        private void metroButton10_Click(object sender, EventArgs e)
        {
            FileRea(metroButton6.Text, "محاضر معاينة قاع الحفر");
        }

        private void metroButton21_Click(object sender, EventArgs e)
        {
            DataTable dt = bd.Select();
            lists lists = new lists(dt);
            lists.ShowDialog();
        }

        private void button8_Click(object sender, EventArgs e)
        {
            byte[] img = null;
            string[] BuildstextBoxesTexts = new string[] { textBox3.Text, textBox7.Text, pdfloc };
            string[] projectsTexts = new string[] { textBox5.Text, textBox8.Text, textBox12.Text };
            string[] projectsButton = new string[] { metroButton3.Text, metroButton4.Text, metroButton5.Text, metroButton6.Text };
            if (imgloc != null && imgloc != "")
            {
                FileStream fs = new FileStream(imgloc, FileMode.Open, FileAccess.Read);
                BinaryReader br = new BinaryReader(fs);

                img = br.ReadBytes((int)fs.Length);
            }
            else
            {
                //img = (byte[])"0xFFD8FFE000104A46494600010101004800480000FFE20C584943435F50524F46494C4500010100000C484C696E6F021000006D6E74725247422058595A2007CE00020009000600310000616373704D5346540000000049454320735247420000000000000000000000000000F6D6000100000000D32D4850202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001163707274000001500000003364657363000001840000006C77747074000001F000000014626B707400000204000000147258595A00000218000000146758595A0000022C000000146258595A0000024000000014646D6E640000025400000070646D6464000002C400000088767565640000034C0000008676696577000003D4000000246C756D69000003F8000000146D6561730000040C0000002474656368000004300000000C725452430000043C0000080C675452430000043C0000080C625452430000043C0000080C7465787400000000436F70797269676874202863292031393938204865776C6574742D5061636B61726420436F6D70616E790000646573630000000000000012735247422049454336313936362D322E31000000000000000000000012735247422049454336313936362D322E31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058595A20000000000000F35100010000000116CC58595A200000000000000000000000000000000058595A200000000000006FA2000038F50000039058595A2000000000000062990000B785000018DA58595A2000000000000024A000000F840000B6CF64657363000000000000001649454320687474703A2F2F7777772E6965632E636800000000000000000000001649454320687474703A2F2F7777772E6965632E63680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064657363000000000000002E4945432036313936362D322E312044656661756C742052474220636F6C6F7572207370616365202D207352474200000000000000000000002E4945432036313936362D322E312044656661756C742052474220636F6C6F7572207370616365202D20735247420000000000000000000000000000000000000000000064657363000000000000002C5265666572656E63652056696577696E6720436F6E646974696F6E20696E2049454336313936362D322E3100000000000000000000002C5265666572656E63652056696577696E6720436F6E646974696F6E20696E2049454336313936362D322E31000000000000000000000000000000000000000000000000000076696577000000000013A4FE00145F2E0010CF140003EDCC0004130B00035C9E0000000158595A2000000000004C09560050000000571FE76D6561730000000000000001000000000000000000000000000000000000028F0000000273696720000000004352542063757276000000000000040000000005000A000F00140019001E00230028002D00320037003B00400045004A004F00540059005E00630068006D00720077007C00810086008B00900095009A009F00A400A900AE00B200B700BC00C100C600CB00D000D500DB00E000E500EB00F000F600FB01010107010D01130119011F0125012B01320138013E0145014C0152015901600167016E0175017C0183018B0192019A01A101A901B101B901C101C901D101D901E101E901F201FA0203020C0214021D0226022F02380241024B0254025D02670271027A0284028E029802A202AC02B602C102CB02D502E002EB02F50300030B03160321032D03380343034F035A03660372037E038A039603A203AE03BA03C703D303E003EC03F9040604130420042D043B0448045504630471047E048C049A04A804B604C404D304E104F004FE050D051C052B053A05490558056705770586059605A605B505C505D505E505F6060606160627063706480659066A067B068C069D06AF06C006D106E306F507070719072B073D074F076107740786079907AC07BF07D207E507F8080B081F08320846085A086E0882089608AA08BE08D208E708FB09100925093A094F09640979098F09A409BA09CF09E509FB0A110A270A3D0A540A6A0A810A980AAE0AC50ADC0AF30B0B0B220B390B510B690B800B980BB00BC80BE10BF90C120C2A0C430C5C0C750C8E0CA70CC00CD90CF30D0D0D260D400D5A0D740D8E0DA90DC30DDE0DF80E130E2E0E490E640E7F0E9B0EB60ED20EEE0F090F250F410F5E0F7A0F960FB30FCF0FEC1009102610431061107E109B10B910D710F511131131114F116D118C11AA11C911E81207122612451264128412A312C312E31303132313431363138313A413C513E5140614271449146A148B14AD14CE14F01512153415561578159B15BD15E0160316261649166C168F16B216D616FA171D17411765178917AE17D217F7181B18401865188A18AF18D518FA19201945196B199119B719DD1A041A2A1A511A771A9E1AC51AEC1B141B3B1B631B8A1BB21BDA1C021C2A1C521C7B1CA31CCC1CF51D1E1D471D701D991DC31DEC1E161E401E6A1E941EBE1EE91F131F3E1F691F941FBF1FEA20152041206C209820C420F0211C2148217521A121CE21FB22272255228222AF22DD230A23382366239423C223F0241F244D247C24AB24DA250925382568259725C725F726272657268726B726E827182749277A27AB27DC280D283F287128A228D429062938296B299D29D02A022A352A682A9B2ACF2B022B362B692B9D2BD12C052C392C6E2CA22CD72D0C2D412D762DAB2DE12E162E4C2E822EB72EEE2F242F5A2F912FC72FFE3035306C30A430DB3112314A318231BA31F2322A3263329B32D4330D3346337F33B833F1342B3465349E34D83513354D358735C235FD3637367236AE36E937243760379C37D738143850388C38C839053942397F39BC39F93A363A743AB23AEF3B2D3B6B3BAA3BE83C273C653CA43CE33D223D613DA13DE03E203E603EA03EE03F213F613FA23FE24023406440A640E74129416A41AC41EE4230427242B542F7433A437D43C044034447448A44CE45124555459A45DE4622466746AB46F04735477B47C04805484B489148D7491D496349A949F04A374A7D4AC44B0C4B534B9A4BE24C2A4C724CBA4D024D4A4D934DDC4E254E6E4EB74F004F494F934FDD5027507150BB51065150519B51E65231527C52C75313535F53AA53F65442548F54DB5528557555C2560F565C56A956F75744579257E0582F587D58CB591A596959B85A075A565AA65AF55B455B955BE55C355C865CD65D275D785DC95E1A5E6C5EBD5F0F5F615FB36005605760AA60FC614F61A261F56249629C62F06343639763EB6440649464E9653D659265E7663D669266E8673D679367E9683F689668EC6943699A69F16A486A9F6AF76B4F6BA76BFF6C576CAF6D086D606DB96E126E6B6EC46F1E6F786FD1702B708670E0713A719571F0724B72A67301735D73B87414747074CC7528758575E1763E769B76F8775677B37811786E78CC792A798979E77A467AA57B047B637BC27C217C817CE17D417DA17E017E627EC27F237F847FE5804780A8810A816B81CD8230829282F4835783BA841D848084E3854785AB860E867286D7873B879F8804886988CE8933899989FE8A648ACA8B308B968BFC8C638CCA8D318D988DFF8E668ECE8F368F9E9006906E90D6913F91A89211927A92E3934D93B69420948A94F4955F95C99634969F970A977597E0984C98B89924999099FC9A689AD59B429BAF9C1C9C899CF79D649DD29E409EAE9F1D9F8B9FFAA069A0D8A147A1B6A226A296A306A376A3E6A456A4C7A538A5A9A61AA68BA6FDA76EA7E0A852A8C4A937A9A9AA1CAA8FAB02AB75ABE9AC5CACD0AD44ADB8AE2DAEA1AF16AF8BB000B075B0EAB160B1D6B24BB2C2B338B3AEB425B49CB513B58AB601B679B6F0B768B7E0B859B8D1B94AB9C2BA3BBAB5BB2EBBA7BC21BC9BBD15BD8FBE0ABE84BEFFBF7ABFF5C070C0ECC167C1E3C25FC2DBC358C3D4C451C4CEC54BC5C8C646C6C3C741C7BFC83DC8BCC93AC9B9CA38CAB7CB36CBB6CC35CCB5CD35CDB5CE36CEB6CF37CFB8D039D0BAD13CD1BED23FD2C1D344D3C6D449D4CBD54ED5D1D655D6D8D75CD7E0D864D8E8D96CD9F1DA76DAFBDB80DC05DC8ADD10DD96DE1CDEA2DF29DFAFE036E0BDE144E1CCE253E2DBE363E3EBE473E4FCE584E60DE696E71FE7A9E832E8BCE946E9D0EA5BEAE5EB70EBFBEC86ED11ED9CEE28EEB4EF40EFCCF058F0E5F172F1FFF28CF319F3A7F434F4C2F550F5DEF66DF6FBF78AF819F8A8F938F9C7FA57FAE7FB77FC07FC98FD29FDBAFE4BFEDCFF6DFFFFFFDB0084000203030304030405050406060606060808070708080D090A090A090D130C0E0C0C0E0C131114110F1114111E181515181E231D1C1D232A25252A35323545455C010203030304030405050406060606060808070708080D090A090A090D130C0E0C0C0E0C131114110F1114111E181515181E231D1C1D232A25252A35323545455CFFC0001108029803E803012200021101031101FFC401A20000010501010101010100000000000000000102030405060708090A0B100002010303020403050504040000017D01020300041105122131410613516107227114328191A1082342B1C11552D1F02433627282090A161718191A25262728292A3435363738393A434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FA0100030101010101010101010000000000000102030405060708090A0B1100020102040403040705040400010277000102031104052131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A35363738393A434445464748494A535455565758595A636465666768696A737475767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDA000C03010002110311003F00FB2B791EE29AD2E3AF6140C13DF3460FA6680232FEF49E6B0FC6936F39A8B1DB3400E33363AD4667C9E3AFF4A80A1C6013D6A121F3F8D004C67233DF8AAFE715EADDBAD42EA476F6AACE1CF1D7DA803445C80319E4FE556D2E428E58115CE375C919F6F5A4F309CFB76EB401BED703A83D4F4FA5526B924633C9AC762C17938C76A8137A90C1BDB9A00DC9E3768F04306EC7B5549D3580546CCF4C6DE73FFD7A9AD2E2F653F2B03B7F87FAD7ABE97A549E4B177DDBB9CFA500737A5DF4D1E2278883DCFA0FC2BD434DBD1280B8E457092C50C0CC4B1049209A9AD75148240141623DBAD006A5FDE22EA646D1D81E2AFF00DB221C74ACDD46117918922F9181FF00F5D799C9AA98A5923752769237763401EC3F6F3B404FC706AACBAB10D829EC2BCCB4CBF95E621D485DDD6BA6BF4749576FDC2B9E6803A069125E171CF515B36D088C2E466B83D34CDE7E79619C01E95EBB669900B018C714019335A2CAC09507D2B42DAC9573F281F4ADDD8A3B53F6851D280329E203359327DE39EB5BB3B1553597146D2B9A00210319EF5A8920238A91ADC2A702A90DC87268023B93BD48DB81DEB1CA7240AE85D95C600EB518800FE2A00E7CA3A2E715CBEA058A963D857A3CB1315181F8D73B75686485948ED401F3A6B1A8AA10A080DC93EABEF593A76B52C794901DCCB92C471D2B6B57D1623E7798589EB95EB5C44F6F0C168803333292093C1FC73401D3C3768C485605B24F1F4AF52D1F5122240C39E84D7CF7A3BEDBEDD9CA9F9979C74ED8AF6CB497CC40C571838DA3DFBD007AC7DB900C019C5653DC9C92578193D6B15199194F26B41D3CC5395E280162B84794107A1AEE61BC72A02E0035E7B6B65E4966C1F98E719AEC6D9781E9401D2F9873C1AB914A4B63766B1C93815346E73D2803B05B9DB8AD78EEF35C30933F5AD0864C0A00EE04D91C5386E3CE6B1ADE4E99AD30E37714016C7208354E484F1815AA80119A561D680397301DC7754A225CD6BB2EE1D2AA2A80E68032E7E00C7AF5AC7B87723039AE9E4B7DEE0F3C5536B4C3668032608885AD240714F54009A70E868025078AC2BC23AD6B6EC2D654EAAD401CFEE24E7A52A382C39EB573CBE6A068CAB03D6803741C28E6A290E71CD631B92188A9967C9A00D58A36660776335AE21B6404B1E47AD614537CFCF4A74F2176033C5006A35C7CB9E315CFCB7609E0807B1ABD1C3BF39E94B2E9EA57E51803D68030D5D998035D1DA311E86B151407D84F22BA0431A74EB401D04781560364D6324D9EF5A11B668034F3C54463269CA0D5E503140188F067822B02EEDE5553B7A5768E3AD635CE0A301D6803E76D6B45B7B9122CD1868D908653D0E6BE51F124074ABA56B6122471825514920F1C600FD2BEECD42D2573C1FC2BC5F5EF0D9BB2031DA07390706803C27C25E358EEEE24B79E572E981E5B72C0FA9C57D316519CAB63823AFD6B3744F0A695000D0D8A2B92373606E38EE4D7A79B2658D76AE703A6280160564AE9ED0B1C8AC3B682490E304106BD02CEC163393E94016228998722B4D6DB00F157111474AB600C50065AC38AB0140C9AB2C00AA324801A0056DA07355D5C66A949366A25948A00DC53529E6A9C0E19466B44018A00854706AB3060DCD6815C0A848CF5A004818B1E0715ABB01154936A038A912E013822802E28C54848AAAD2AA8C9AE66EEFE42D84381401D51DA7BD4254115CDDBDE316018F15A6F7D085383D3BD0032455DDD29ABB41AC26BCF9C9072334EFB5A919CF3401D0ED1EB50B1653D6B9A3A815E9508BE73DF8A00EB44BC506615CC09C96041AB864F4A00D07B8C66B3FCFC9F6ACB9AE09C81C55333955C5006CBCC2A9BB02BD6B20CE091CD299BE5A0086790E6ABAC9DF359D71363915946EC2F7A00E8A52189E07358334209E38AA26F883D6A786704E4D007317A8CBD457153A927A74AF57BD457438C5709736F8EB401C9F20F50314923E475AB376081902B019F03A77A00B1239C601AAAA5F27DB154D59B71C9FEB56C6073C9E68037A124E3D6AE47295719AC349401EF5389D4B80C79CF3401DC210CA0D729AA582B92CA0E71CD6825EC5B303AE6AC4CFBE218EB401E257BA7CADB8EC2473CFA5799CF672216FBD827F1AFA66EEDC2C0F9F4AF09D49F6C8C14FE3E8280388C329C3638E0E4E47E152AE72739C1E3047F9C54D2286607B6DA8D091819C939F7C8A00B1B1031C8CE7B6783F4FA559E08C2927B0F4FF22B2E4C1C65C703231CE4D5C8640AB81851F4CF34016B7738C0F971C514C503923249073DA8A00FA8028C1A6E33538C11D6931E9401536F26A16526B4714C0BCE680338AF3D39355CAFE3EB5AA501ED50941FE34019657AF19CD4254E738AD328BEBF8544C006ED81DE8032BC8039FCA816FF00360715A781B8F1511237039E450055369B4633CE2B266B491031DA71D6BA279973935B50C2648C8F6A00E0ED8BC732E18818AF70D3AFA336E06EFBA39AF2E7B70932961900F4F4ADCD38332CA08EA723E9401ABA96A16EAC0F5CF4C7359FA7CDF68271C3039E95AABA7090E08032738AAD1DAC36937CA718A00DD7966485F3CF1C9AF19BC89A6B80109E5B737E35ECCB771C91302083DCD63D9DBDBCB70C76739E7F0A00E43CC16CF6E0FDD73CFBFBD695DEA719755C6E3EDCD50F115B334C8161C827E5C76ABDA258C7275E4F4E473401D769677939183FD2BD2EDC0550335890DA22A2F1CD6D47851F4A00D05EB4E9182AF5C1F4ACC69C061839A6CD203CE6802294B943525A7CA3AF4ACC96618039EB44129E2803B588965E45413451E31CE7152DAC8020E3F1A8A690727228031B6953C74A7A9C91CE6AAC93F3D6A18E4CB039EF401BCED841815913671C8EBC56D42738CD49222118C500791EA363F397C8C66BCDFC47A2C7796B8880DDFCEBE81BB80106B929ECD4A10179F5A00F9EAC7409E34049DACA3818AED6CE3F297664E7F889AEAAE74E98E70BD3EEFE3556DF4CB82A3CC04953914012C7223B01BB38FC2BA68986CC1EF58DF61F2FE6E7914AB33197382003CFBD0074327C8A3B8CD5F81FE43CF5AC292EBEEA9E09E94F5041C1CF3401D5090B01CD5947359503671C76AD15A00D446C8E062B4101AC48E400D6A24E80707B5007409215EF5A3139279AC18A40C339ADC808DB401D246DC0AB7C1ACD88F4AB7BC0A0076D151F94A4D297A9541A005DB815564518AB84E2A9BBE3228031D97E6A89860D5E0A59B351BA8EB8A00CF722A8498157D873551972280282B0155E675DA79A99D40C7158F31C31FD2802913F31153C7C1AA841EBDEAB99CA1C500742251C0CE0FAD4B14ABB8E4F1EB5CBBDC67A75AA6D31E704D007A647770A77A825BFCF415E6BE7C9C024D4E276C0E4D0075AD2C45F20E0F535616726B9C8A50474E82AFC6D919A00E9E27E9D6BA2818102B8D85EBA481E803A74352EFC567237156C50058EB55A445C5595CD295CF5A00E6A7B6120CD624DA7C4EA7207E55DA3C60671598E8C41FAD007356968B113C735B2A8BD302AD2AFB54CA99ED4011C36A8A43631CD6B799814C5C015048C33401A7149915703D6146F8AB6241401A4C41158B75F29A9DA603BD625D4D93D6802A48DF3706804003E6E6A8873C9CD4C0138CD006D40E47E35B4B29C62B020183CD6DA2E68035A33B853250A80B1EC2923F96B0F549E40981D0D004571A80D9803AD5AB4FB818F5AE20393201DABA759B6C4A2802DDDDC9DA79C57301C96EB497573EF54639031F4A00D657C7D29B2CA7181C5401B8EB541E639FA5005B3D33559DB1D0D5632F1D4D5767E28026693DE9F1B67E95965B06944B8EF401D0AC815BAD4BF6839EB5CE8989EF4A66E7DA8037A491597358F2C98E33555EE0F4ACC925C9EB40169E46C8EB52991B681597E6640A6B4E318F4A005B89302B919EE0EEFF3C55BBAB82CC707F5AE4A79B9386A00D73312719ABB1CE71D6B8917043609AD9B69C9383401D00B97DC726AA4B206EBD3BD464605665C4842D0062EA476824F4AF3D92E947BE4F5AE82E7CD9CB060702B989E344EBD73D0D005F8E53B8E7F0A9639549EB8EA3AFA573BE602983CEE351891C1C63807B50076A8EAC49CD67DCCAF1E4FAF1D2A9C333281C727BD417B70709D48CD00736FAADCA5C2E24E87815DEDAEB2C225DCD927B578FEA16D247379A1F1B81201FD6B05B51954281C9EC3FC6803DF2EF595752A1B391C77AF2DD4255673C8071C9EF5C9C778E4AF393DCF71E948CA5D1883D4F23EBEB401710924E0F403B75FAD5269773138CE3923A7B734B124C15B8F97D47A56679A55B04FCA49E07FF5E802F2C8AF9F97047F9EB575B0A32A33DF93EBEB54A161B198B0001F5AB85938C60FFB5400864201E738CF39EB4543E62F2D938C658FA0FF001A2803E9E178001C8EB4F37AA0FDEE7D2BCD05D1C021B391D734F17B8249CF1D2803D24DEC7839229BF6A5CE73F8D7989BFCAE73D38A97FB400FE2EB401E8FF6C5E73ED4CFB4E7A1C8C579DFF69A3018247E1DE99FDA09B88DC3AF5CD007A09B9047B01CE2A99BAEBDBD3DEB886D40608071E9519BC5500E33DC739A00EDCDC9C03DBB64D547BA427939FC7D2B8C92F53232DC1EC6A26BB42DF2E40F4F5A00EC7ED8AAEA4907D73D38AE961D426CABAF0B5E4FE7208DBCCC8CFE238ADCD3EE646645079EA07B7BFBD007B6A182EE0662A338C9C568E9F6EB1C6D8C6D3F98AE26D3538EDD54600CF19278CFA5320D724FB58551CF395EB401EA47CA543827915C45E364C6AE4125B030715B004D3213B707D3BD70371697EB7AAC72CB9C007D2803AF891823260923A11DEA785040DBB3B41E7AD6A45B111411C9C566B24734A46770CF63401BA116E7E95663B04825DC87B52582A2E40FC335B0CCA3DE8012267EA4F353BC8DB6A0523B545BF9A0070C9C935387C23679C54519CB63153CA362D0061B062FD71F5AB30311DF9AAAF8C927A524472D401DAC32315C6702ABDD65532BD4D36DD82AF23F3A7CD28F418A00E777B6486ABF01031CF4ACF98AB38C647B55D8D4A0193D6803A446F96AD23641AC989BD2AE06C9E3A5005561B98F34D312E2B4043D315388700D0073AF0039E9408900C62B6244AA7B39E94019725B2B26074AC99AC17036AE0F4AEB828141894F5A00E004041C15C91DEAF22E47CC05750F0A8E839ACC68F04923A734014F72AA9E6AB1BB1FA554BC20F2AD8C76AE3EE9E543B89C83401E84972A6A835F057E1B9AE4E1BDE073C114A0EE7CE78A00F58B0BC460077AEDE29320578DD99DB8D873CF35EA36527C801EB401D744E7157410473D6A8DBE0E326B49A2E06280210A4E6B454614542A768E68F32802566C0AC596427357249706B25C824D004F139C5123645555914700D2B3E680236A80D2B362AABBD004128C0AC595549C8AD291B8359FC134014B68E7358932EE26BAA31FCB9AC56898F38A00E5B92D8CD69C317CB4F16B8909C751D6B4154014019A623F4A89A3C56C3E0AF4A6614AF4E868021841C6056BA0007D2AB0DA391C54EA450068C479EB5D140DC0AE6107435B70374A00E9236C915AF17358119E6B7203C0A00D5038A08A50690F1400C0A3359D3C783C77AD0069E109ED401951478E2AD2C58ABC2300F4A90A8A00C99001594EDCF5ADC994573F2AFCD814012ABD3CB1C5561802A3C9A004966201AC8925CD5C93A1AC59393400BBF9AD38A61589822A688B678A00EAE26CF535B50B13F4AC3B72B8191CF7AD88CE2803707286B8BD5CB8039CD7561F03935CDDE3248CDED401CEDAB6EC66ADCF26D4AACA514B63A566DD4E1C6050067CB3932726ADC2C719CD73A490FEF5AD0B6168035BCDC0359924B50CB20C0E7EB590F2FBD006A19C0C542D31E79AC432919EF5465B96C63D680369AE7B74A679E300E6B9669B8EB9E69827391EF401DAABE703353C920DB5CA47758FCAAC99B22802EC93819AA5E71EB9EB54257CAF5E6A8A4848C668035FCFC1C1A59EE17CBC83CE2B299C739F4AC59E7038CD0036E26249EC2B9A9AE14375C54F34E5B22B058EE7CF422802FAC85DB3D726BA2B627200EF5CFDBC637027BFBD75912617200E9401AD8E07278AC999493EA31D2B4839E86A091D428CD00613C20263DEB88D4605E70474CD76F733285FBD5E7B7D31790953C771401CAC81170771C7E5F8D598DD0E724360E2A09304608031D79CF4AAF01DA579F5E2803A3DDFBB600F41D6B9296F5BCE03A00463BD6C3B9E81B3C73C75FC6B93BA81F7E4751D003EB4014F51B879D986EDA3EB8207E15C88B6919BE504827A9EFED5D5C96F2329EA7DC74A58A05C8C9FBA01FAD0036D2C426D72A18F38E7A1F7AB13C71236E3C827E95A30B2A8E39EE31D2AA5D4624C9F61CD0066336D75D98DD824D722CDBA562CA7DC03EBDEB72E16489891D31C73C0ACB251D81C0008EC3BD0047732E635DB803A0CF7A862998373F88EB4C91708B93CE7F4A40A7238C63F99A00B0AE59437738EFD31EB454283E5CF1C9E474FA51401DB0BCC0386070463EB4FFB6118C1279CE4FBD708970FB73B89E991D00FA53FCE3C1EDD720D00762F7EAA3B63383CD566BE271861DFFF00D75CA19E4C9C0383C631FAD53F31B7038FC7A8A00ED1EFFE6186F6C7F4A41799240EC3BF18F4AE219DCB600E475E3F954819C2F52496E727A8A00EC1AE013F7CE49E3E9E9524B7586DBB89239EB9C7E55C2BB3803691807079C538C92A4AA413DF70C71CD007A0D9096E4B3230C2FDECFA0AEC6381400C776D2060F6E6BCB60B916F8DB2105C6D6E706BEC2D0A2B1974AB6CAA9CA0C7B9F5A00F03BBF395537A31321C0C2FE952A8B952AC03A3F5C62BE9E61681903C2B8FEF11546EF4EB39738E7208E39E0D0078C0D335592D77B80C0F41D0FD4D4DA66917305CAB6E6DCCD939C9193DEBDAAD6C516354C600E00ADE5B003071D2802AD9310ABB860E39F5A2740EE0E40353CB1B6D2178E2A38EDDB9CD0067CD1E23F9AB3ED2D245943AE0AFAD74325A965EBF9D0AA614C5006AC4981D854A739001AA69236DE40E6A40E09CE68014914BB876AAC734809CF5E68034E33F3549712A9E09C553889F4EF48C992734019524FC903BF7ABD015047354278829071F9D311C839A00EA7CC1EB5527982B0183CD6489C64E0D31A4765E7F5A00BB102CE58BF4AD2690600EA4560C2D8241AB91825B27D6803A253F28C1AD085BF3AC28C9C75E2B4E2A00DC47FCEA7DDEA6B30139156949E28015F045572BC8AB3D28C0CD00572B48474AB9818A63014014B69AAF242A456885A691401C54D6BF36715CE5C42ACF971C01D2BD50C391D2B06E34E0CF9FD2803CB66B2055B6B60F51542D5662C158F3CD7A79D39016E3AD663D8AA13800006801D676B28504577F6AC54735CED948471ED5BAB212C2803AE824248AE99243815C6DAC84D7468F83401ACD8DB54378A56724633548B007AD002BB579FF008BAFB50B2F0AEBD756257ED56FA75D4D6FB9378F3628CBAE57B8C8E95DABB8AE1FC57AB59697E17D6EFAE99560B6D3EE6490B74DA233C1FAF4A00FCE5FD99BF685D63C572369BE2AD6629350BA68534D1F65588CCE43348A5A3E09C0E3238AFD401277CD7F2FDF0CB58BCF0E6A7E1AF12C16B0BCF67792BDB5BCD2158E46D8536B91F7473807D7AD7F477E07F128F11784F49D4CA451CB736EAD3C31BEF58661F7E2DC7A953401E86CD9EF55DCF153819AAF28C5005693A552087D6AD3FDDEBC8AAEAD40136F60B8AA441AD35008354DC0068032D81DDC5489D79152900E06299B334010CC48078AC72EE2B65B27208AA2F17A500548E490E4B1AD18A4E6B340C1E6AC27068037D24AD685F06B9E8C9CFD6B49188C62803B089B38FA56FC26B92B66E0575101E9401BC8322A42BC546878AB19E2802B8E2A50D4D38A89985004FBAA32D50679A76680294AE4E79E958ECD826B72440455278860F7A00CC0D9A0E054FB7DA9FE513401972106B31D016E2B7654C0AC493009A00AECAB8CD4B1E36FE354DC9E9512C8450074B11E99AD649C022B8F6B8C28E6A34B9618A00ED65B9E0FCD5C9CD7154E6B9278FEB5812CE72680355A6CE6B1DE73BAB324BAC03CD629BA0C73BA803A012296EB57E27C835CBA4E9BB24E6B4D2E54034016E46209AC29A6C1EB45CCE7AF415CB4F7A0B707A75A00DB33F1835953DC60939AC57BAC3100D625CDE72003401D41B84DA39AAE671D8D7202E86473528B93DCF1401DA24F9F6AD78642C40AE22095D9B68EBDABBA8D045175EDCD00172F1A8EBCFA5617DA02BF5EF552EEE7E7EB582F70BCE393DE803AF96E33835817522ED249CD3229D4AE4E2B2EE6619C2F7A00A4F21C9F4A811DCB0E9FE359F2CAC09DC38CD4114D890051FD6803B38F7ED1CE706BA48EE17CBE0815C7C72E471DBD69DF692A07D6803A79AE180041ED5C84DA8CA19BBE3B67F9D3EE2EC85201FCAB8DB9B9DDF9FE7401A336A648393CE38AE6E49D9B71C704F15977323B0239E73DEB32395F1DB8201F407EB401D380A4720741D0D33685DA704F073EFF005AA51DD22F53C038E952999095393C76F5A00B9F3B1E403FE14DF2B9CBFCD522CA09C1EA390055959B0071EF9A00CCBC402127BE3A63B0AE7B785F4E79C0F6AD5BC9C33924707A0E86B08AE412A080462802D799BBA0C6071FFD7A7CAFF2A819C8EBF5AA24808C00EA29630E093BBE5CF4EA680209F2CAC0F209FF00F5D72535B346C40E37723DABA77925DCC73904F0302A94FB1C877238E83D7D8D0073EA248F21BE607000C7414E70770CA91C0C7B55B7DCC4E005F527B64F4AAA1598ED65C7A9CD00332BB38CF0491E80F7A29E5F66400303B67BD1401476956C0209E80E7B7B55663B79C6401D73DFDF159226DB8C64F27273C52B34840C3654F381FD6803495C0DC49EBC8F5F6C5224C323E7E33C0AA885805F9810573EBFFEAA4511E382738CE7A722802713E402001CE3776FC69C65DC176838EF54D8282081C6EC1FA9F5AB2106DC92D93FAFFF00AA8018B30201C839EFFE3485DF730DD8555C818E9F4A40E76FDCF6E7D477A7412C0974AD32B10C40201E99A00E934EB1DEB13BBAEE99880075AFAAF4A8DE1B4891641851818E735F385EDED8A7D9521460A9D3BEE07DEBDD7C2D78B2589757DDE5B1183401DF5DDD4BE5C692C59CB60135DB6911EC03775C74ACAB768AE6252C98C723355A6B99229C727D063BD007A5FD9118EE1D6A658BA0C554B1B8262524E78ADC2C9B770A00CD785464E2B25F39E9D2B7D882BD6B0E6001CE2803358313D7152128000467DC55479B2DF74D519669508C2F06803580031DE91B8ED59D0DC3327CC3068DE0E6802F6E071C77A70519AAE8C2AC8209CE6803463C05E2A16930DFCE901C0EB59F2485493400DB875AA241C543BB9271522B0CFAD00423706CFE7574F604D2281915A889BB0714015523C8F7AD18D70BEF5623847E756360A009A002B51540154220302AEEE3E940130079AB480D408322AD2F1400F238A5039A40739AB4A28021C1A8B1568834CC73C500330318A4095262A41F4A008C0A638E338A909A4C64500653212A6B9F78E4F9830AB3E26D6ECF40F0E6AFAB5CA33C3A7DA4B7322A63732C43242E78C9ED5F1CF877F6A7F859AEEA7A669AED7D637D7D3A42914F06511A4FB9BA54247CDC7D09A00FAEE20AABD738AB2B2E5B8AF933E33FC5AD53E1DBE9ACBE1D6BE82E21B8792432345B1E075063040C64A9279AE67E15FED1DE16F19C9A8C77367FD8AF6C50C6D73708D1CA9267187E30E31C8E98A00FD04B171BABA2DC3D6BCBB49D5EC2F60135A5DC17311008786459170791CA935D3477A437A8A00EB1A438EB550C95966E4B74AAFE7104D006AB366BF343F6C5F1AEA7A5785F43D1ACAFCC07579AE0DEC6B8DD2DAC4A06C39E8858F35FA273DE2C36F34CFC2C513C8DF4452C7F957F36BF15BE27CBF123C5516AEDA7FD8CC5A7A5A8843EF5051896604F50DD680313C30AAFE1D96D240DC5E651D4A9085D7D0F5E7AD7D4DF0CFE32CFE0DF13D8DBCF732AE9ABBDB52B48C655B70DA24453FC6A7040F4E2BE4AD2AF5ECAD915911A296411C858708CADC38C7423BFB537C5FA3489AB0BC5940F3A5118183C363233FECFBD007F485E04F1DF877C69E1BB7D6B469E496CE69258D5A48CC4FBA26DAC0A9E47B57A1B735F83DF013E22F883C2DAD2E8F15E3ADBEA37D648B6330CA2CF34C0486207A164EBF4AFDE76003B81D03103F0340141978AA3B706B5981AAAE38E9401596420D31B9A4E0543BB9EB400A54F3506C6F435794E08AD38CA11C0A00C530390302AB988E3073F4AEA768AA32019E9401CC4919F4A8A34EBCD6FC91FCA73597B4647140122822B4E31D2ABAAD6825006A43C1FAD74F6EDC0AE6A2C574109A00E9108C0AB3BB8ACC8CF156770C500399AABEECD44EF516EA00BA0D2E6A0535600A008C9E94D238A98AD40727814011845CD2639A42C01A50E0500665D602D72B33119FAD74F74DED5C8DD640228033249F04D526B91EB59B732E0F7CD6319886EB401D37DA07AD3D6727BFE35CB098934AF73B460500741248C73F4AC196427F0AAAB7B9EF9A8A49448BEFE940197737041201FCEB0DAED95813D3F9D5BB9E0F4C62B89BC979CE47A7D6803BA8EEB700411D6B452E1831C9E3D6BCE74C9D9E7008383DBD715D7DCCAD16495E3D28016FEF19549078FAD716F779E73D066ABDF5F872138EBEB5C9B5C32B3139EE7EB8A00DF7BC3BB21BDF1DEAABCDFC59E4E41AE65EE37B29DBB48F7FD05598EE03AAE79EA3A5006DF9D87196E315623978DA3D0FF009158B9000CB1C62A4120054E3802803D02CBCB0AAE4E58719FE95D3BDD168F8F4AF2F82666C00738FEB5D1C53613938228012E250A0E4E339CD736665DC7239CFAD4F7770199B20F1DBEB5CF33B64FCC0F3C7F85006EB5D60819C7A62A06B866E01EA6B04BB1624FAF18349BB19EA7FA5006BE19C91ED4EF2F85C63008EB546390F1F5E99AD1F332A4671E82802FC64E002735A010BAF1C715970BAF1B8724F3ED5D0C08C4718CD0063496ECEB8079CD504D2E4421DB049AEECDA1037639EB5997A6441804D007057366FBB38C8E462B026B5D9190CA09C8C03FCABD0D260FC30AA2D0079401EB919A00F3378D9181236E7D7D6ADAB900929923BFD6BAD9F4B9F73B01C75F6AA06D591725781EB40198AC039193DB040CFE156C648EF8048FAD4B1C2AE85F3C8CE3D29811D416248E73400E16A8FCE338E955E4B1239E83DBBE2AC25D7CE30462B644A08278CF61401CA3588DF919AA6F16C0C41000EC07AD767C6490703B81593776ACC84A75E32280382B88DB7E3AE3BF6ACC687605E3BE47B5760D6D212C197FFD55567803B602631FFEBA00E364240DB92BD78EF555E3E491D3D73CFE75B73C2064946C73D4F7ACC742318C73838E9F8D0066863BB24F23F9FBD14C2A1E45DA7E5C71FF00D7F7A280390793CB279073D8F4FC08A3792010DC1CE79F5ED4C104A1305F80BDFF00954A6005067A60647AFF00850044D3E1413D3B71C9ED4EF3989E18647A535A0033CE001CFA7349F67041C9CF181C70334013ADC3EE52480571BB9F4E9527DA158E49271DFBFE355CDB820127918C71DBDE9FE42EEDCBCF519E9D3D6801BE7B2C64E7231F97E1486590EEC310A477A5318C1C118EA7271F97AD215562BCE3E9EBF4A00AA6EEF02E37329E383C83EF5EB7E11F152D80F2A60369241CF7CF738AF2A5DACF113C0DDDC13D7E955A48C2DC6D56F9739041FD05007E8A693AED95C4404720257191EDEB5D1DF4B11DAC3838FC315F08E83ABF90AAAD2B2B038C7207AF35F4C69D7D6F79084691989C753C0F6CD007ADE9FA9654AFA1EBD38AEC62BA3E59CF4AF13804FE6FC8DF28E319AF43B669360079E0739A00EC84BFB9DC39C562CD788CC4022A037288A7271E95C1DC991EE731CD800F3E9401D6C938DD9C70298F30287073598D950A4E3A538ECC1C7E38A008D4B9C6455E470A719ACF5259B1DAAD8897393D3D6802E6FC9F96AEA12A3AE6A8AA8C707A5590781F95005A321C567CB9C67BD59DAD503839C5003634C8E7A534A0DC306AC81F2F34A319E450011A91CE7BD6D46C171CD65AF5CFF4ABC8AC4D006B6ECE38AB3B322ABC6A48ABE170334002255E58F151C58ABC0F3400CC6290353CE0E6A931233CD005C46526B4548C56021E49CD69A483028034319151EDA7AE4D3F6D0042062822A438A6D004614D21E2A614D205007C25FB5B6B6F61F07AEAD124749355BFB6B41B4E3280991C1F620735F8AB6767A7B4F697CB6F3C5289A260A1CA82082DBE361D0E57F035F7DFED99E2A7BBF11689E1E88ED4D3ADCDECED9EB2DC8DA83F0515F9FBA1DEDA9D06EE395A659627531306CA71F3818E8083DE803D6FC57E24F14F88F40D32D6F6E6E27B432492A4525D19DC4DD03957F993E5FC1BB57CEB61A64F0EAE74FBC88A990B465597187C10ADF9D7D19A4269BE25BFD3ECECA5FECC925B64951B26457646F995F249C83C823A7A576BF15748B451A7CF3F84E6D3EF1618FCFBD8AED6649240DCB1C13CFD71401F2AE93AE6B9E1C7B5BBD3EF6EACAED494696DE531FDC38DA40E0FA1AFD3DF833FB486B7717D069FE28659ADEEE6778B55385687761443222E06DDDD1FB0EB5F9AB736B23E9573E6C40F9D234B04BB71F3A6372AFB30E7EA28F0AB466E2C6DD8236F8A662E4E0C650E70477C8A00FEA181201A6AE5C8001249C003B9AF15F84DE299BC4DF0F345D42770F71E5182E4F4CCB09DA491DB2306BCC7F68EF1B6A7E15F85DA8CF612795777D345610CA3868FCFCEF75F460A383DA803C3FE317ED2FA2DAD96B7A1E80CB2DE24A6CE6B995331143F24C21FEF32F4C9E3D2BF1F6D61282464E420DDB41E98EC7DE9B2DB03D0B1DA3192D93EF93F5EA6AD2381A7CAC3EF3000FB1CD006AE973492C37513282CCE6451D339AB7E2413BDBD9AAC8DC20380DD40E39CF715CF42FF00679E39320A9078F6AEFD346D7A5B0BA7360F35BC91A37991A86F2F770AD919239E181A00D2D2BC5DA569FA869BA915B817B69245710BB1568A39E33847D879200EC6BF58BE0D7ED07E20D7354B5D23C5DA1C9A75C5FC8534BD4840D0DB5EBA8C98DB71F9656EAA0706BF25B4BF833F103538EEBCFB096D520923499E68C8521F8CA7A9039E7031DEBEB4F046BFE2DF10C1FD8BAE47642C747D581B4D6EE2E3FB3E559AD50A47E5C9CE30075C1C8E0D007EE013C550766C75AFC8FF0003FED45AB687ADC1A5F8B2F9752B190A245A94368E8EA858A894B71E6A3776C67BD7EB3C73C33A33C522C8A0E094218038CE0E3A1E6802227354A407B75ABE4A1E959F29E0E2802BF9ADC7B1AD58AE07AF4AE65D981A7424F9A327E5A00EE16E148A633A9E73549248D871D29DF2E3814004B2165C0154D50F535736E07D68DA2801100AB6B554715694D0069444D6D42C78AC34ED5AB1B605007451B8C548CFC75AC512F14BE71C75A00BACC3348A726B3FCCE6AD230CD006B46055E02A8C4720735781A001BA5533919ABB51E06680305E65DC54E6914E7BD68CB6AADCF7AC6D8E8D83D2802C48010735C7DE29E735D43C802D731752654E7B50079E5E3618F3CD738EDCD6D5E7321E4D6115258FD6802D024286ED5519FE61CE69ED26108FF39AC82E379A008A7273D6A68E666DBCE2A8CA8E58E091E82A9BB1418C9A00DF9DD0AF3E95E5FA8C6412564E09E99E9FFD7AE82E277C72C7A62B88BF9B70C91C8E02838E6803434DD4238A401BA838E3D2BD2A6B98AEA1C061D3D7AD782C6B2BCCA1539C8E47539F7AF53D2ED6E2DE2C4A4649C81401CDDFD930F32451919031EDFE15C1CC6504EF5627B0C6335EE172B1B216CF4EA2BCF2F6C4CF31233D47E0050071A251804F1D38F7AB8AEC467B7D6A6BEB455930ABCF193EB54D629323E5CE0671E8471401685C02EA41E9C1F6F5A9198E01181DFF000FA528846170C371EA09FEB4F306E4008C1EDE9C5005B8AF76657D7A91CD68FDA1CAF2781DAB9D6420F0A01380315306278DDC7F9CD0059926DD8EA01CE33D7F1AAB23B6D24F4E807A7E34E646C633F87AD5AB72A59720EDCE083CE68028DB6F639D840FAFA56A34394DDB4E0F6039AEC6D6DAD9436C53939EBD39F5AAD243B1C8DB907D28038E668C11C73EB4AB2B17C039C1E454F7906C738463DEB1629180C920E3A1FE9401DA5A812100F5CFD78AF51B4B78D517BE0578E5ACEC8C854F5C74AEF20D436004F7FE7401DE984346715CCDF5ABF97951F5AD6B4B90E473C56F491A9888C6411401E0F319028E38CF3F4156ADA3C00C7922BACD434DEA0700D51B38CC2EA0AF5EB400AA2461861818E95C9DEC6C65EF8E807F5AF5110C6EE38A8AEED50A6028FCA803C9A1B2573B8640E8466B22ED1A17233F2EEE6BD1845B095F435CF5FC1190720E4D007170B127904F239AD233AA90338C71FF00D7AAFE590481D8F1D8D462076DD8FBDE9EB4017D1D8A9F9875F4E315A8AEA14E4E78F4E6B00248A30CA460115A28F82391FE140174A063C74C8ACEB88B0E0EDE31D0D68A6E209EDEFED56F86C7AF439A00F37BA82462FC6154E7D6B10DB17859B0413900015EB2F0A65BE5EA79A83EC11104E300F6F5A00F1836AC1C900FE431F51457A54FA6127EE123B01DCD1401F3506610205EA3A8391D3D6A2323798F86CE547CA7FF00ADDEA359BE4E9D380DE9F5A80CCCC31D381C9F5FFEBD0059575700FCD8CF4F5C77AB1E6827695CFF003ACA6726462581E3D714F1332950091EF401AAC1F711B173CF23AF1ED492173BB69E00049E9D6B3C5C3039DB8E06E39E9520B86C3364E3A1CF23F1A00B4627FBC4677100751C7D69FE5310403D89CF4E6AB7DAFE504EE39E319A04A739C8C6327B81F4A009980055D895381D3BF6A9D3CA041239C9C73FE78ACD69643C9F980039E9ED8AAEF232CC13EE9EBF8FF850075B6A77CC0C480B6D24E0647D4D7A4E95AAF944A2291CF3C77EF5C4E9ADF621F6B63BB007C98E0E78CD6DEB64131DCDBE17760B0CE3AD007B9693AC5CC933A3A9DB900102BD8E09C468339C915F2058EBD736925B00C58E70CA46471EF5EEB0EBAD701360C76CD0074BAADCC8F9284E53922B9F7D493030A4F1F363F84FA510CE5E4957BF1C9EF585245E4DE3808CC58F381C0F7A00E8E0D4649648C946C018CB715D44B398A3C96C0ACB8A06921C8407A77E2ABDCDADE5C144C6147DE3FD28034F4FBE126FC374E326A537FBCBA8E4A9A4874F78142A8FA9F5AB8B6597C80376704D00695B3EE01B3DAB7A37526B1638CC6C0151FE15A2BF2D00691202D54206ECF6A619323153A8DC7D2802ABB10E39A689016C7D2A475E7A555030DCF6A00DA8537D74704236D61DAE4F6AE9636C102802C8880A91B81519980A0481850038039A98B1F5A8C30C54CB40120E9556504D5927DA9A719E94014D118559506A6C7B54800A00B51B6055CCE6B294F38AB8AF40139A675A6E7340CD0049C629ADC8A09C8AE435CF13691A236982FA75885EDDFD9E32C401958DA56639ECAA849A00FC08FDA46E9B51F8D1E2E2432F932C16EB96CF10463A7A039E95F3DE8B3430595E65B6B6C0E9C71B87F0FE35D178D7C4A3C4BE33F106B4BB82EA1A84F3C61BB464ED407FE020570CA76EF2ACA03FAF4A00AF36A37AD770DD427ECF3248260D17C8449D37281C2E7D0715ECD278B7FB7ECA6B6D4D48BA29FBAB88F23CC61C80EBEA7A1C75AF261046C3E831927F4A423046D6C103839C106802B4CD7D8FB3C8EDBA272918248D873D3F1AECFECB08852FADC491DCAC89F26D0CA4B10AE0E3A035C8CD9919A42E58B1E589E49F5CD5A13B49728AADE43B4610B8279627218FA5007DF3F02FC713787FE20C361F6BF274BD4A629708E7318761B63233F75B7E067D2BD87F6CCD53CBF0F784B4F3C34DA94B70C0FA429B7F99AFCB9D0357D42CF504911D7CD4476CC9C90F19DC0A9F50466BEA5FDA53E20E97E2EF12F87CD8CE6686D34C8F739180D3DC012498F5DBD0FBD007C77745C3BA8070C4907B907D3DAADE8BA36A3ABB3DADB0C6D7592772788A30429723B819CE2A0B5D662B2BBF367B65B98C2E0C6FC01EE08E41AF78F8737F05CEBDABCB6168C8F346EC9624822689572C88C700BE790B401E4DE38F0BEAFE1BBD8A2B89619E2972B0DCC2D98E403D8F2ADEC6B83B1F19EB3A5EA4B3D95FCB0B8914C78276B48A38CAF46E7B1AFAE3E217846EBC47A769474CE25129658EE5FCBC24992CB213C2F9673F857D2FA27C35D37E196956ABA558D96BBAEBC627BED5648C4896E187FAAB30F90319CEEC64D007D1B0F8E751F19F80342D5351D28E9FAC24925A5DE9D771B422EB0A0B2ED900F95C7CC846403C57E6AFED1D7973FF00093E8D7D296B9D2EE2D5505ACA369B7994ED9159570AAFD0AB0E0D7DC16BF1BFC4ACE6DF52BB17F1955FF8F881599467037A918C7B8AF4C826F0178E6D258AE2CADA379D4A4B6F280F6F29E9F231FBADEC7045007E19E85E2B9ECE68629F75C410485E30DF7C2F6C376FA74AF55B5F8977FA5DEA5CE8115E696ECFE63CAB792B79CE171CAB657AF26BEF5F137ECF7E198AD5E1D36D469F7792119D4CD1952302360C72109EA457E73DDE937D65757515D694B6D2DA5C189912391214652403993218363823AD007EA67827F6ABD36E6DD1358D31D12DE0B64B8BF59D15E495861DD603CB0DDD42F41CD7D4FA4FC63F85DAB9B7167E28B3779E48E348DF746FBE4CED0C18719C753C57E006A9712CD0C2676000CED000C20EE1781DEB8DB1B5BB96ECADB1652C3E52720803DE803FA98F25BD3AF43ED5656D491D2BF067C07F1DFE20F81747B9D3ED25B7D4E147F37CBBD0F29881E088D810541EA57F1AFD9EF847F13B43F1FF0084EDB51B668A3BB5012FAC95F73DB4BFDD39C12A472A7A5007AF436ECA0F1564464D6CAA714F2A31D28032FCBC715564C64D68BF02B1657CB1A00664D5A561C7354370CD4E84D006E46455B0D8158EAFC54FE61228034BCDE3AD34C9CD67EEA98104D005E56AB68FC8AA2B57128037E16E056A29AC587B56B29A00B19A4028069FDA801ACC00AC79597D2A79DC9E958B236339A00AB70D9CD727747084D6D4F29C915CD5D4BF291401C94B8E6B1A438F6AD391C735CFDCCC79A00A9249CF158324E379EB8AB934849C6315872107B73401B90DC8208C6715937530662401E87D2A1819C13D3DEA46F25D181E1B9E68039D9EE17664B7CC33C0F7AE2D42B4C011C31C9CFB56C5E46BB8947E31D3DEB090BEE04601CF41FCCD00779656F1F9800519CF35D6CF741405206E078F6AF31B5BF9930A79F523F9D699BB04E49248FE9401B33995E27209A8AD4FCA0B2F38C1F6A96D2656DA49001EDEF5AAD1404707E6EE3EB401C1DEA42D70CD8FCEB98329598957F97D71C7D2BABD4EDB0E0F55239F6AE3D222D29C723B8FFEB5006FEE2A59B1D4647A5226F92439E323239A9608C9E074E7AD7556D0280300738CD006441A73E549183EB577FB2FBF419CD77905A67191C0AD096D1162A00F24B9831C01DFF4F5AAE8A5641C720575F35B06248F5FCAB18C6E9C05FBBD8FF8D006EDA6011CF5ABD3307C8DA07BD654714AC84018ABE2260993DBA8A00C4BCB46C6E1C8E7F0AE06781A32C483EA07A1AF487DED20049007EB546E6CE366240C823B8E9401C95A26792C39C1C77FCEBBDB7487600DC9CFD2B9A5B7F2CE3AFB5598E66327E3D31401E8F6F2C68542E2BA78E73B735E6D1B14C1DD9F6AD08EE2556F979079EB401DECC8244C8AE5668083D30477AD08EEA670322997120C71D714014A10CCC327A1ED5B738CC631F8D6446CBF9D6834B84200A00E7A44DCE79FC2B9EB880499E706BA6DC4B138ACDBA8F6E585007172E9CCF85EDEDEB593796AE88029E47535D89BCC11F2539A4DCBCA8C5007210970A0300548E49A99D411855FC3AD740EB1BA90546474F6AE7E5508FC67B8FC2801E029EBF4ABCCA85011F8525AA2B13C75E87EB5D0C702F4228039E0011CF18ABA96C48C6715D40D2D6400FF002AD6834A5E38C7D680302DACC28058641E9C515DF4764AA0668A00FCB0058938048CFCDCF1815239906DFF0064608C54A50E0E09DC390318EB4BB46E041079FD2802A12C55B239F5F4F635265B6E0A8F60473F4A371551C739C9EE3EB522BF23A9E386E98C50042DB940C2F43CE3FF00AF4E2B1EF04E0F072075A93EEE783C9CE73FAD3D97B657391F374C5004037875C3678C0069CD272B91CF1819E3FF00D548E02B139C0C15E7B1FF001A708029181D578079CFBD0040CE48E5B3827B7F855A49995633C3624E73FDD34DF9065B6FBE01A8DE4CE480A49E80FF00F5A803B6B9D46688AAAA2B44E307B8F7C7D2B52DAF639AD0465158AF4F6F4C570826DF1A06C100118FA56C5B4A239032260E793E9401B720659A36031B4139E98FFEBD74E9E21BB8C8D9D14019F5AE5089665FF58AA39E7FFD752840CC1739E3D07E3401EEBA46A5BDE3919C024738F4AF578EDE3BBB61221E718CFD2BC674F8145A85238C73835E87A4CAD0406212617191DE803D074D592242AE8303BFAE2BA02D081C0EB5C6DBDDC66220B74A7C57C7CF200273DA803B07C15155C4786E01CFAD0ADE62820636D680DBC1A00ABB5F736453363EDC939C55869579A8B79240E0D00240A5BAD6A0534B120C0157368ED4019CE87351BC44F22B41E32474A68523AD00476C58391DBAD6FE7033594846E06B57036D005669F9FE952453B12727B54263C9040A455C313401B913E6B440E6B9E864F9C0C715B31C809A00BC29481DAA266029CB20C5003874A66EAAEED83914C0589A00B4473C52EF2AC2A157C7152B30C6714017D5B8A941CD66231CF7F5AF8BBC75FB43C3E19F1D6ABE1E8F4786EA5B3B781C48D75E51679937EDDB839DBDF1CD007D53E2FF001BF84FC21A50D475DD522B1B52FB033025A46033B2351CB3E3A0AFC21F8B7FB44EBDE33BEB18A0B6B686CEC8DE888F9643B9BA56877924F688F03D6BABFDA03E2FCBE3BD17C3BA5CDA3C56B75677325C4D22CCC572EBB142A9E808EA4FE15F0945A75C4973F32954520B13E8280360448B6B0A0E0A28CE3B63A568C0AA620A003F3023D3DEABCA184CE7820E08C7A1AB168CFF006C8846CABC82A24395E0F73E9EB4012DCB2EE4039208E0543843F79B0DDA993DECF3DCCF3489F33C8CC428C0C93DBDA91B0C036300E3B7A5003DADF2AE3206EE777A30AC6595964DC549E849F5C56CA9600104707918E31EDEF549B634A8BEAE467D33EB40126992C6DAA5A4B2026332234B8ECACD83FA577BE20D13FE252B7D14E192CAE1ECDC63EEA86251B3D791EB5CD58D95A49AB6976E651E4DE48B1160725327183EE0D7A945E1CBDD5EFF005FD0FF00B462B69760BA4321DAAE62E486F603A9A00F99253E6CE533919F9B038AFA2B43B992C348B416C91A5CA19E405D77076D9EFD081D315E3D65A16A361AE2D9DFDBBA5CA5C460443E60C0F3B830C82A4743D2BE84BDB1B3B7D56EA370C9083218B3C0C6DCE050070DA078D15671A5EA104B2C379095F3F7B34C923724FBF3D3D2BF55F4F85E5D06D5095C411C51721B122B2028E3EBD0FBD7E256B08CD71348BFBBD872181C30C9C822BF4FBE0478FBFB6B4A5B0D454E2D336ECCEFF2B2F041F5C8CE7F9500753E23F07D9DC866540998CA3A83B1883FDD3DB9E95F3FFDAB5BF0FEAB68EF08B8B6B86586E19582B7A00E87A9FEEB0AFD01D4AD6CE3B3BD1259BDC3451B90AAF8240E4633C135F95BAB9D775ED6350FECB9AD25B493E59AD2499526B77538654C91919F9830A00FBE74BF89771A5DBAC57ECD7BA79276195C19224EE11FFD9FEE9E95D678CFC1B65E27D0E76B4BC32DBDCC03128C6F8893B909F6C8EA38AFCEEB1F873E398365BD8599D56D353CB85B6691C09216DACC5A403CA914F73F787B57DFFF0009BE1D6BBE15D254EA9ADCF148256961B28764A906F186466FBA55FF00890700F4A00FC85D574FD46CF5A6B3BB2D1C9033C52C6F9215C7231FEF7635DA5F4E2DB4C66B3C348A8A327E62148C12A7D3DBB57E91FC57F87BE1FF001B5BC1F67BE8B4ED4EDCB22CAE84452A1E76B11C820F43FC35F95F0A789BC3FABBE9D7D04D6F751966811A3C3191739F2D8F0DB8743D08A008FC3D650DFCC637BD681D9BE47232BBBFBAC0F4DC3BD7D29FB3E78BB55F06FC64B2B02B1795AACD1D85D44B82ACAFCC6F1B0E72A79E3835F32EA96F388E49C131F4236E72181C939E9C1EB5ED7E12F17785ACF5BD0B5BB8D223BEBED2A7171B2371189B6038407A161D573DE803FA473205C8CF2091F9545E700315C3787B5DB5D7342D3754B765315EDBA4EBB5C4806F192BB978254F071DEB7E4738EB401627B8E2B9D693926AC31CF5354A40B9E05004EA4E455F5ED54622B5A200E2802C0E94F06A1DF8A50D4016C366AC28AA0A6AEA9A00BEA4D5B46E6A82B55846E6803A288D68822B0E27E95A4AF401A2A6A53D2AB2354AC702802ACC01535CC4B839ADD9199B8158532900D0073B70C72735CDDD64D7473B01D4572D74D9A00E5A72413ED5CCCAE4B673DEB6AF1B93F5AE5E63904E6802ACD2E78F435892C831D7F3AB4E4919C9EB58F23E7DC0A009771E718E95BBA782FB94AAFA1AE25246F34819C639AEDA18BCA5C83CE381EA68032355B4857A600CF6EC6BCE98C2F3107200C7D0D7653873239977004F1CF35C6DE5B2264ABF53F53C5005811A6C6C3640E306845206700F3C66A8313214018FF2AD59328318EB8EBCF4A00B026318520F03D2BB0825122A9FC6BCF3E7F94007D8D749693E31CE33C11401B1A9DA24D105DFDFD6B9B6B058886043115BB70770CEEEBD2A9C527CD8EBDBF2A006410B96EA083ED5D7DAC1F32E3AD568635006315BD0A48197681401E83696A7CA07DBAD64CA0348CADEB5D8D8BA18B69C0E2ABCB6AACC4E2803847D3C1CEDEFFAD63C9A79DFB49FCEBD205B48B542781179279F4A00C1B6B02231F2D3DAD970462AD8B89101C0E94AB711B027F8BD2803909AC46E27F0E2A835B95E0F6F5AE86E2E137636E0E2B97BA98E4FCDC77A00A5322649CE2B218C51BFCB9C81CF6A734C189CF6EF59D2B019241CD006BA3C8EFCE318EBDEBA5B7460339AF3E598060013F5E9F8D6F5B5E90319E050076E8E55719E690B6F233F8D734977BCE0FF003AB0B29DDCF41401B6CC01E0F15756E2309CB66B9A69C13956E2B3EE66D8B80726803BD0F048991C1ACABA3195C13D7A573F6F707CAC938F6F5A74D3074200C1A00A0EB102482289033C6401DB8150C28F21FF001AE963815231DE803968A370391522DA6F63EBDBDAB72440391DEAC5BAED23E5A00A2B6BE5018E3157A11F30F5CF7AEAD60DC801155CDBAEE185A00B3015DBD39AD2F3304035982170383C549B4EF1C9A00E852418E45159EB923AD1401F95AA46DCE738C6327A0FC69DB109CFA9CE054CAA41DA411D3934088E4B86CE7B67814008C98FE0C823A76E69CC80AE57D854FE5ED047527919ED53C2877292C0F078FD0500669039518FBD8CE7BD286C03827907181E9ED571633C0DC707F4A574EA40C9EBF80A00CFD8190E3B11F9FF005A9FA1239C807A51B1F839E08E4E3D6AE451120E01C63923BF6A00CD757C6ECF23F5A8987CB8E3EF638E78AE8CC4B222918C838FFF005FB565CC3E51D8E3A77FAD00451C0F233E1B6807A1EC3DFDEB42157570ECA484CFD0D4BA740EF095DBC3038207F3AED6CAC45CCAA8C38E8ADF4F5A00E7564967DA1467392300FF003ADAB4D3E599896E769C9C6702BD3AC74482395158ED90FF007471CFAD7A52D95B59C2155012C0F38EF401E376E2F2DD18176209002E6BD77491B906E4E7009E6B97C192E59882157A719AEDF4F112A8F9473D49393914017A4832FC36DFC7F435D0E99691C47731C907AE2B9C9643BF03A93D2B66D6E6E11829427BFE1E9401D734807DDCF5A559C37B5409346E06781EF57963808CA9A00CF983315DA73CF357218E40D8C64D58587380077ADD86255C7AD002448F819AD2F2F8A915077AB000A00A7E5E6AACCA3B76AD362AA2B0A697E73C50022305E49E956BCFCF435CEB993775A986E5604F4A00E9A373B7AD5DF2E37009AC9490141F4AB11B834016FC91C1156A28CA927D6B0E59A40FC74CD69C574A700E41A00D2693E53C5560FEF8A8267E091D8564249277A00DC69077ED534730CE2B1F2FCD2AB92781CD00746A54B548C456742E31CF5AFCFBF8E7FB446ADE09F17E9FA2E9BA7C32945B5B9BF9E43B9BCA91F98635E818A8FBC6803DEBF682D435DB2F85D7D268DA8BD8EA0F7B6296F3A36D65265048CFA1039F6AFC68FDA2B598B5CF8809AB41A3DC58BDC585B2DDCAC7297370A815A5888E8074F5A9BC65F187C65AD68BAAE9777AACB3D9C9AA1D4ACFCE50D3DAB2485E38D5D7F84038C7E556B47F14586B7A35EDBEAA2416B340164755C98241C89517B8079C0A00F9F11C5DC704B3CC44DE52AB6EE7795E01CFD29AB73F2AAF97B5D090DDF77D7F0AA896EB1481432B2AB111C87A373E9DB35DC6D481BED0B88E5558CC67A80DEA280397BB36C9E40476DE54F9CA570179F9769EFC75A2092552FE59F9A45D9F28CFCA7B7D4D5CB9D31AE34F9EFDEED649E3917ED10B9C3B2C87874FEF01DFD2B12D9E5DACF1927CBC36470076A00B522A6E655C8231C8F4FA55A60925A4AA06E3852307A7BFD6A8B14174A4119C0278CE7D69D2AA2CB84C1C8638E9C03D2801109DEBBBE6E39F6E2B36F1A78FCBDC36E5C9071C73564A306241E809FC7AE68BFBAB89EDA2499D9D220368C70A3DBEBDFD6803A7D3B532345297112986D6EE3903C6A0BC25CE4B061C9191CFA577DE265D3EF3578713C8F3CB2BC0F2C196601FE642500DC772B1FE55C1F8367783C411DAB4CA2DEE5F6B83CA91B48191ED9AF68D3E1B4BCD321D5D23B6983C90DA6A8164314F6B25B12A2E176E0956E338E6801DE184D12CB50B7B6D4AD5EE62B424437DE635BCB0227DC8CB3E42A3632148C83915BDE34D0F56B3B78279D526B7683CEF3EDD1BCB8C3820239EDF5E86BCCBC3FA92E81F11186B96CF7B65248E974CB21647F33957527862B9C915FA25AF49E1ED674A934BB4B979A1BA0156609C461C6D00F1F30046403D0D007E51EA70412DCAAAC99322862B8E1571C1E7DEBB4F8317D25AF8C2E615BC10978DB742D9226C75183DC0E7D6BA5F0CFC24F146BD0EA3241796D05ED9CDE55BC72829F698D49073FDD23B67AD7192FC3CF8A5A2788AD6F0786AE9E41202190031965E3EF83C03FA5007EA759EB375AA416D1C01E59126FB3B22A93216CE067FD9C724D58B8FD96BC0B77E27BBBABBB1792D59229E29A3BC6133DC139915D40C2A2FF091D6B2FE0CB6A3ABF8CAD5A2B711A58E9E1B52043068EE492153A609C77F4AFD0AB4BC59DDD179553F2C8A410C3D38E0E2803CB34FF08E9BA3E98B67616C6DEDD092137B3E49EA496E49AE3351B1BA52766F23A1F9FF009D7D117292C7D1721B807FFAD5C46A16F2162513233CE6803E26F13E93A97CEF1B3AB0C9EF8FD2BC32FF0053D4D6336BAA58C77F6839092C6260A4742A46194FA115F6BEBF0DD4684AC6BD4F18E9EF5F346ABA95806D9711C6AFBB00B0653F811401F2A6ABE18F00EBB399175ABDD2A639014C9F69B71D8828D82A3D40AE665F859E20D392FF00588A1B6F122C03FD16DB4F8DA55773F2869A15F98468BC903A9C57BB6A1A358CD742568637DC78240DC47B91C1FAD7216F1EA1A1EAF1EA3A35FC96F243282C636380C3B102803D3FF660FDA274AD16CADFC17E277365E55C18F4EB9742A10CCE58C33E71B1413F29C77E6BF66E50467208C1C57C71E1DBBF859F186C23D2FC6DE1DD3E4D5826C8EF001149376CA4A9B583FB1AD3B9FD9F3E26786F55B3BBF087C44BE9ADECE331C7A3EAEC6E6DE4849DC62F317E6507180D8257B1A00FA84914E28BB739AF29F0249E3F3E1B8C78BAC20B4D6239E649D2DC8313A6ECC6E98CE032FF002AF484673C0FC68025276B6454EB3124578978E7E24787FC1F2686BA9997FE26DA82D9C1B003B58F576FF64679AF5B0C51995B190483F85006D99052AB9AC3F37E6ABE871401ACAD5795BDEB255AAC86A00D50C2ADA3562AB735A51B74A00DD88D6A20AC885AB66322802F2F02891C6DC5405F154E4905003CB002B2A69060D3259F9AC39E7E28033AE9F39AE5A77C96E6B4679BAD7377127CA4D0060DD3F2C31F8D7392815B136726B165C73401912F4F61F8D73D313D07AF7FE75BB2902B19F66E5CAE4668027B3B2951D59C7C9D47BD76164BE64BBBDB03F0AC9B694CC08E84702BAFD3211B870319E68038BD62228AE4AF727DABCAE562EE7048C1E83DEBE92BE8A27664619DDD0E2BCFE7D0ED4390A42E4F4A00F324548D460D497191CAF7C63BF15B17362D0BEDC120679AA8B13B751C7AD00540AC1873D3BD69AA8C86C007D45096AC171838E7F4ADA86DCA1524F51CD00536CE31F90A922199322B48A2B0E82A5588A93401A508248CD6EC190473597129DBD39AD58170466803ABB694A10466B723D4149C938C7EB5C33DD1438CD466E9377A71401E9DE7A49D3BF4AC9BB542873D7B57171EA524670BD3DEAE9BD7700B1E7D680285DC9E5F438E3A572F2DEE18E1F1E87A574D76E862E83A66B8731C649E323AD00327BF2739E7B562BDD2B7DE6EB4F96139E7D6B02E7000C8E878A00B8D3A163826A9B1DC47CC3078E6B2C162E704E3E951287041278C1EB4016A4660402DEE7152453ED18EC4F22A93E778539E3BFF002AB02267E46383DFB7F8D006941787CCDD8E0020F35BE2ED4ED1EB5C740A06E2FD41E9EBEF5B36FB091CE28036C34980B91C8A8E65C8249E98029A6488639F419AAF70CAE42A9FF1E28027470A460D6CC5B4AE315856E8C01E707D2BA2B655C807AF1F4A007AE558F1D2AE898E074AB261EA71CD67BA3924628025DEA71EFDAB52265E9DC0AC4DCAA3919AB11484366803B8B697803A9ABE83924D7316D28CF07AD68C972460679A00E87E522B2CB287EB50A5C6075AA4D22EEE48A00D612F3C0A2B2CB01DF8A2803F3801424B600F9470067356D421048E87A0C7A566801870F904F0C38FAD5A58F92DBB9C7AF6A009D42E38C903B7AF61D69E8007C602B13C9C6694152A09219B1CF6C7E150160403B39193E9F4FC280078958939EBC8C7F2A7B0CA6EE49E33F85407E54CEF241239CE4F229A1A4D80B7193C7B62801DC85CAF51CE3AD765A1E90BA8DC6C329458C6E6C0DC49FC2B861233EECAE0640C74FE55F5D7C2FD3E192C4CC61DACEC519BA93B7B8A00F3CB8F0D5BDBC524A8645319070C32707D45707AADADB450A9405E420E471CD7D8BAE68AE2DA731E1B70E879E45731E01F020B8BF9351BF8892A7F75138E01FEF1CFE9401E0563E18D7E1B0172DA64DE5B018E3A6EEE40E715DA5869D7D0AC85AD5FF778DC48E99AFD0A86D61F28A141B7D2B2AFB4BB06898796A07D3AD007C2EF77283DBAF1EDED5D55B5E34B180DC1C7E35D278AF437752D042A1D1B3F28E08AF0A8F5465768DCEDDA7047A11401E96D1E64C2FCD9E78AB96D0";
            }



            ////bd.implementerCompany = "8";
            //PD.projectName = textBox16.Text;
            //PD.projectOwner = textBox18.Text;
            //PD.projectrecordingDate = DateTime.Now;
            //PD.implementerCompany = textBox19.Text /*textBox4.Text*/;
            //PD.projectConsultative = textBox17.Text;
            //PD.startingProjectDate = metroDateTime2.Value.Date;
            ////bd.Sandreport = textBox5.Text;
            //PD.periodToImplementProject = textBox12.Text;
            //PD.projectPhrase = BuildPhrases.Text;
            //PD.BuildUnitsFrom = int.Parse(textBox3.Text.ToString());
            //PD.BuildUnitsTo = int.Parse(textBox13.Text.ToString());
            ////bd.BUildedDateAndTime = DateTime.Now;
            //PD.BuildReport = pdfloc /*textBox4.Text*/;
            //PD.ContractCode = textBox7.Text;
            //PD.Image = img;
            //PD.projectName = textBox16.Text;
            //PD.projectIndexation = metroButton3.Text /*textBox4.Text*/;
            //PD.locationOfCheckingDrillingBottom = metroButton6.Text;
            //PD.receiptOfTheSite = metroButton5.Text;


            //bool success = PD.Insert(PD);
            //if (success == true)
            //{
            //    MessageBox.Show("New Project Added");
            //    clear();
            //}
            //else
            //{
            //    MessageBox.Show("there is a problem");

            //}
        }

        private void metroButton22_Click(object sender, EventArgs e)
        {
            DataTable dt = PD.Select();
            lists lists = new lists(dt);
            lists.ShowDialog();
        }

        private void metroButton17_Click(object sender, EventArgs e)
        {

        }

        private void metroButton13_Click(object sender, EventArgs e)
        {

        }

        private void metroButton23_Click(object sender, EventArgs e)
        {

            String RequestedFolder = "ملاحظات المشروع";
            filesPrep(RequestedFolder, sender);
            //FileUpload(metroButton23, metroButton23.Text, "ملاحظات المشروع");
        }
        private void button12_Click(object sender, EventArgs e)
        {
            string selectInBT = "Select COUNT(*) from BuildsMainTable where ContractCode Like'" + textBox7.Text + "'";
            OleDbConnection conn = new OleDbConnection(myconnecting);

            //OleDbConnection conn = new OleDbConnection(myconnecting);
            DataTable dt32 = new DataTable();
            //OleDbCommand OleDbCommand PD = new OleDbCommand (selectInPD, conn);
            OleDbCommand OleDbCommandBT = new OleDbCommand(selectInBT, conn);

            //OleDbDataAdapter OleDbDataAdapterPD = new OleDbDataAdapter(OleDbCommand PD);
            OleDbDataAdapter OleDbDataAdapterBT = new OleDbDataAdapter(OleDbCommandBT);

            conn.Open();
            //int rowsPD = (int)OleDbCommand PD.ExecuteScalar();
            int rowsBT = (int)OleDbCommandBT.ExecuteScalar();

            //if (rowsPD > 0)
            //{
            if (rowsBT > 0)
            {

                //bd.implementerCompany = "8";

                PR.projectName = textBox9.Text;

                PR.ContractCode = textBox7.Text;
                //bd.BUildedDateAndTime = DateTime.Now;
                //PR./*Image*/ = img;
                PR.recordingdateOnDB = DateTime.Now;
                PR.dustReport = metroButton4.Text;
                //bd.Sandreport = textBox5.Text;

                bool successPR = PR.Insert(PR);
                if (successPR == true)
                {
                    clear();
                }
                //else
                //{
                //    MessageBox.Show("Failed to add new Build. Try again");
                //}
                //DataTable dt = bd.Select();
                //dataGridView1.DataSource = dt;
            }
            else
            {
                MessageBox.Show("المنشاء غير مسجلة");

            }
            //}
            //else
            //{
            //    MessageBox.Show("المشروع غير مسجل");

            //}
            DataTable dt4 = PR.Select();
        }

        private void button13_Click(object sender, EventArgs e)
        {
            //if (metroGrid1.Rows.Count > 0)
            //{
            //    OleDbConnection conn = new OleDbConnection(myconnecting);
            //    foreach (DataGridViewRow dt in metroGrid1.Rows)
            //    {
            //        //string querySelect = "Select count(*) where "
            //        //string querySelectcount="Select count(*) where "
            //        try
            //        {
            //            bool isSuccess = false;
            //            string query = "insert Into deductionTable (type,amount,PricePerUnit" +
            //                ",totalValue,Importer,Deduction,validDeduction,confirmedDeductionVal,DeductionPrice" +
            //                ",notes,ProjectCode)Values('" + dt.Cells["type"].Value
            //                + "','" + double.Parse(dt.Cells["amount"].Value.ToString()) + "','" +
            //                double.Parse(dt.Cells["priceOfUnit"].Value.ToString()) + "','" +
            //                double.Parse(dt.Cells["amount"].Value.ToString()) * double.Parse(dt.Cells["priceOfUnit"].Value.ToString()
            //                ) + "','" + dt.Cells["importer"].
            //                Value + "','" + double.Parse(dt.Cells["deduction"].Value.ToString())
            //                + "','" + double.Parse(dt.Cells["deduction"].Value.ToString()) * double.Parse(dt.Cells["priceOfUnit"].Value.ToString()
            //                ) + "','" + double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString()) + "','" + double.Parse(dt.Cells["priceOfUnit"].Value.ToString()) * double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString()) + "','" + dt.Cells["notes"]
            //                .Value + "','" + deductionsProjectCodeValue.Text + "')";

            //            OleDbCommand cmd = new OleDbCommand(query, conn);
            //            conn.Open();

            //            int rows = cmd.ExecuteNonQuery();
            //            if (rows > 0)
            //            {
            //                isSuccess = true;
            //            }
            //            else
            //            {
            //                isSuccess = false;
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            var st = new StackTrace(ex, true);

            //            // Get the top stack frame
            //            var frame = st.GetFrame(st.FrameCount - 1);
            //            // Get the line number from the stack frame
            //            var line = frame.GetFileLineNumber();
            //            MessageBox.Show(ex.Message, line.ToString());
            //        }
            //        finally
            //        {

            //            conn.Close();
            //        }
            //    }

            //}
        }

        private void textBox10_TextChanged(object sender, EventArgs e)
        {
            string querySelection = "Select * from BuildsMainTable where BuidCode='" + textBox10.Text + "'";

            string querySelectionCount = "Select count(*) from BuildsMainTable where BuidCode='" + textBox10.Text + "'";
            OleDbConnection conn = new OleDbConnection(myconnecting);
            DataTable dt = new DataTable();
            try
            {
                OleDbCommand OleDbCommandBT = new OleDbCommand(querySelectionCount, conn);
                OleDbDataAdapter SA = new OleDbDataAdapter(querySelection, conn);

                conn.Open();
                int rowsBT = (int)OleDbCommandBT.ExecuteScalar();

                //if (rowsPD > 0)
                //{
                if (rowsBT > 0)
                {
                    SA.Fill(dt);
                    ProjectCode = textBox10.Text;

                }

            }
            catch (Exception ex)
            {
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog opnfd = new OpenFileDialog();
                opnfd.Filter = "Image Files (*.jpg;*.jpeg;.*.gif;)|*.jpg;*.jpeg;.*.gif";
                opnfd.Title = "Select Build Image";
                
                if (opnfd.ShowDialog() == DialogResult.OK)
                {
                    //    pictureBox3.Image = new Bitmap(opnfd.FileName);
                    //    imgloc = opnfd.FileName.ToString();
                    //    pictureBox3.ImageLocation = imgloc;
                    //    label25.Text = opnfd.FileName;
                    //
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        private void metroButton24_Click(object sender, EventArgs e)
        {
            //FileRea(metroButton3.Text, "ملاحظات المشروع");
        }

        private void metroButton26_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "البرنامج الزمني";
            filesPrep(RequestedFolder, sender);

            //FileUpload(metroButton26, metroButton26.Text, "البرنامج الزمني");

        }

        private void metroButton27_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "الموقف التنفيذي للموقع";
            filesPrep(RequestedFolder, sender);

            //FileUpload(metroButton27, metroButton27.Text, "الموقف التنفيذي للموقع");
        }

        private void metroButton28_Click(object sender, EventArgs e)
        {
            try
            {
                FileRea(metroButton27.Text, "الموقف التنفيذي للموقع");
            }
            catch (Exception ex) {
                MessageBox.Show(ex.Message);
            }
            }

        internal void FileUpload(Button metroButtons, string btnText, string FolderName)
        {
            OpenFileDialog PDFUPLOADS = new OpenFileDialog()
            {
                Filter = "PDF|*.pdf|Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png) | *.jpg; *.jpeg; *.jpe; *.jfif; *.png|Excel Work Book 97-2003|*.xls; *.xlsx; *.csv",
                ValidateNames = true
            };

            DialogResult result = PDFUPLOADS.ShowDialog();

            if (result == DialogResult.OK)
            {
                if (!(String.IsNullOrEmpty(textBox7.Text) || String.IsNullOrWhiteSpace(textBox7.Text)))
                {
                    string file = PDFUPLOADS.FileName;


                    string[] f = file.Split('\\');
                    string fn = f[(f.Length) - 1];
                    string path = "";
                    //@"C:\Users\dell\source\repos\Gardinia\Gardinia
                    //string subPdfFolder = Directory.GetCurrentDirectory() + "\\pdfsFolder\\";
                    //string subdirpdf = Directory.GetCurrentDirectory() + "\\pdfsFolder\\" + FolderName;
                    //string imagesSubFol = Directory.GetCurrentDirectory() + "\\images\\";
                    //string imagesSubDir = Directory.GetCurrentDirectory() + "\\images\\" + FolderName;
                    string subPdfFolder = ".\\pdfsFolder\\";
                    string subdirpdf = ".\\pdfsFolder\\" + FolderName;
                    string PDFSContractFolder = ".\\pdfsFolder\\" + FolderName +"\\"+ textBox7.Text;

                    string imagesSubFol = ".\\images\\";
                    string imagesSubDir = ".\\images\\" + FolderName;
                    string imagesContractFolder = ".\\images\\" + FolderName + "\\" + textBox7.Text;

                    string ExcelParentFolder = ".\\Excel\\";
                    string ExcelSubFolder = ".\\Excel\\" + FolderName;
                    string excelsContractFolder = ".\\Excel\\" + FolderName + "\\" + textBox7.Text;

                    try
                    {
                        if (Path.GetExtension(fn).ToLower() == ".pdf" || Path.GetExtension(fn).ToUpper() == ".pdf")
                        {

                            if (!Directory.Exists(subPdfFolder))
                            {
                                Directory.CreateDirectory(subPdfFolder);
                            }

                            if (!Directory.Exists(subdirpdf))
                            {
                                Directory.CreateDirectory(subdirpdf);
                            }
                            if (!Directory.Exists(PDFSContractFolder))
                            {
                                Directory.CreateDirectory(PDFSContractFolder);
                            }


                            if (Directory.GetFiles(PDFSContractFolder, fn, SearchOption.AllDirectories).FirstOrDefault() != null)
                            {
                                MessageBox.Show(file);
                                MessageBox.Show(fn);

                                path = String.Format(PDFSContractFolder + "\\{0}", string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn)));
                            }
                            else
                            {
                                path = String.Format(subPdfFolder + FolderName + "\\" + textBox7.Text + "\\{0}", fn);
                            }
                            MessageBox.Show(f + "سيتم رفع الفايل" + fn);
                            File.Copy(file, path, true);

                            report3loc = path;
                            metroButtons.Text = path;
                        }
                        else if (ImageExtensions.Contains(Path.GetExtension(fn).ToLower()) || ImageExtensions.Contains(Path.GetExtension(fn).ToUpper()))
                        {
                            if (!Directory.Exists(imagesSubFol))
                            {
                                Directory.CreateDirectory(imagesSubFol);
                            }

                            if (!Directory.Exists(imagesSubDir))
                            {
                                Directory.CreateDirectory(imagesSubDir);
                            }
                            if (!Directory.Exists(imagesContractFolder))
                            {
                                Directory.CreateDirectory(imagesContractFolder);
                            }
                            if (Directory.GetFiles(imagesContractFolder, fn, SearchOption.AllDirectories).FirstOrDefault() != null)
                            {
                                MessageBox.Show(file);
                                path = String.Format(imagesSubFol + FolderName +"\\"+ textBox7.Text+ "\\{0}", (string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn))));
                            }
                            else
                            {
                                path = String.Format(imagesSubFol + FolderName + "\\" + textBox7.Text + "\\{0}", fn);
                            }
                            MessageBox.Show(f + "سيتم رفع الفايل" + fn);

                            File.Copy(file, path, true);

                            report3loc = path;
                            metroButtons.Text = path;
                        }
                        else if (ExcelExtensions.Contains(Path.GetExtension(fn).ToLower()) || ExcelExtensions.Contains(Path.GetExtension(fn).ToUpper()))
                        {
                            if (!Directory.Exists(ExcelParentFolder))
                            {
                                Directory.CreateDirectory(ExcelParentFolder);
                            }

                            if (!Directory.Exists(ExcelSubFolder))
                            {
                                Directory.CreateDirectory(ExcelSubFolder);
                            }
                            if (!Directory.Exists(excelsContractFolder))
                            {
                                Directory.CreateDirectory(excelsContractFolder);
                            }
                            if (Directory.GetFiles(excelsContractFolder, fn, SearchOption.AllDirectories).FirstOrDefault() != null)
                            {
                                MessageBox.Show(file);
                                path = String.Format(ExcelParentFolder + FolderName + "\\" + textBox7.Text + "\\{0}", (string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("dddd_MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn))));
                            }
                            else
                            {
                                path = String.Format(ExcelParentFolder + FolderName + "\\" + textBox7.Text + "\\{0}", fn);
                            }
                            MessageBox.Show(f + "سيتم رفع الفايل" + fn);
                            File.Copy(file, path, true);

                            report3loc = path;
                            metroButtons.Text = path;
                        }
                        else
                        {
                            MessageBox.Show("يجب رفع صورة او بي دي اف او اكسل");
                        }

                    }
                    catch (Exception ex)
                    {
                        var st = new StackTrace(ex, true);
                        // Get the top stack frame
                        var frame = st.GetFrame(st.FrameCount - 1);
                        // Get the line number from the stack frame
                        var line = frame.GetFileLineNumber();
                        MessageBox.Show(ex.Message);
                    }
                }
                else {
                    MessageBox.Show("ادخل رقم العقد");
                }
            }
                 
        }
        void FileRea(String metroButtonText, string UnValidValue)
        {
            //if (metroButtonText != UnValidValue && metroButtonText != "")
            //{
            //    pdf PDF = new pdf(metroButtonText);
            //    PDF.ShowDialog();
            //}
        }


        private void metroButton30_Click(object sender, EventArgs e)
        {

            String RequestedFolder = "الاخطار";
            filesPrep(RequestedFolder, sender);
            //FileRea("الاخطار", metroButton30.Text);
            //FileUpload(metroButton30, metroButton30.Text, "الاخطار");

        }

        private void metroButton29_Click(object sender, EventArgs e)
        {
            FileRea(metroButton30.Text, "الاخطار");
        }

        private void metroButton40_Click(object sender, EventArgs e)
        {

            String RequestedFolder = "طلبات الاستلام";
            filesPrep(RequestedFolder, sender);
        }

        private void metroButton46_Click(object sender, EventArgs e)
        {

            String RequestedFolder = "الاعتمادات المخصصة";
            filesPrep(RequestedFolder, sender);
        
        }

        private void metroButton45_Click(object sender, EventArgs e)
        {

            String RequestedFolder = "اوامر الموقع";
            filesPrep(RequestedFolder, sender);


        }

        private void metroButton44_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "جوابات الادارة";
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton52_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "الميزانية الشبكية";
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton51_Click(object sender, EventArgs e)
        {
            
            String RequestedFolder = "صور المشروع";
            filesPrep(RequestedFolder, sender);

                }
        public void insertMultiData(String FilesPaths, string fileCat)
        {
            
            String FilesCategory = fileCat;

            string insertingMain = "Insert Into ProjectFiles([FilePath],[FileCategory],[ContractCode])Values('" + FilesPaths + "','" + FilesCategory + "','" + textBox7.Text + "')";

            /*"Insert Into "+ tblName+ "(AsbuiltFiles,ContractCode)Values('" + text + "','" + textBox7.Text + "')"*/
            try
            {
                string selectInBT = "Select COUNT(*) from BuildsMainTable where ContractCode Like'" + textBox7.Text + "'";
                OleDbConnection conn = new OleDbConnection(myconnecting);

                DataTable dt32 = new DataTable();
                OleDbCommand OleDbCommandBT = new OleDbCommand(selectInBT, conn);

                OleDbDataAdapter OleDbDataAdapterBT = new OleDbDataAdapter(OleDbCommandBT);

                conn.Open();
                int rowsBT = (int)OleDbCommandBT.ExecuteScalar();

                if (rowsBT > 0)
                {

                    //bd.implementerCompany = "8";

                    //bd.Sandreport = textBox5.Text;

                    //bool successPR = PR.Insert(PR);
                    OleDbCommand OleDbCommandInsertProjectFiles = new OleDbCommand(insertingMain, conn);
                    OleDbDataAdapter OleDbDataAdapterBTPI = new OleDbDataAdapter(OleDbCommandInsertProjectFiles);
                    //MessageBox.Show(OleDbCommandInsertProjectImages.CommandText.ToString());
                    int SCIPI = OleDbCommandInsertProjectFiles.ExecuteNonQuery();

                    if (SCIPI > 0)
                    {
                        MessageBox.Show("New File Added");

                    }
                    else
                    {
                        MessageBox.Show("Failed to add this File. Try again");
                    }
                    //DataTable dt = bd.Select();
                    //dataGridView1.DataSource = dt;
                }
                else
                {
                    MessageBox.Show("العقد غير صحيح او غير مسجل");
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
                ////MessageBoxIcon.Error();
                //var st = new StackTrace(ex, true);
                //// Get the top stack frame
                //var frame = st.GetFrame(st.FrameCount - 1);
                //// Get the line number from the stack frame
                //var line = frame.GetFileLineNumber();
                //MessageBox.Show(ex.Message, line.ToString());
            }
        }
        public void MultiSelect(Button metroButtonsMulti, string FolderName, OpenFileDialog ofdMultiselect)
        {

            //string[] files = (string[])e.Data.GetData(DataFormats.FileDrop, false);
            if (!String.IsNullOrEmpty(textBox7.Text))
            {
                foreach (string file in ofdMultiselect.FileNames)
                {

                    string[] f = file.Split('\\');
                    string fn = f[(f.Length) - 1];
                    string path = "";
                    //@"C:\Users\dell\source\repos\Gardinia\Gardinia
                    string subPdfFolder = Directory.GetCurrentDirectory() + "\\pdfsFolder\\";
                    string subdirpdf = Directory.GetCurrentDirectory() + "\\pdfsFolder\\" + FolderName;
                    string PDFSContractFolder = ".\\pdfsFolder\\" + FolderName + "\\" + textBox7.Text;


                    string imagesSubFol = Directory.GetCurrentDirectory() + "\\images\\";
                    string imagesSubDir = Directory.GetCurrentDirectory() + "\\images\\" + FolderName;
                    string imagesContractFolder = ".\\images\\" + FolderName + "\\" + textBox7.Text;

                    string ExcelParentFolder = ".\\Excel\\";
                    string ExcelSubFolder = ".\\Excel\\" + FolderName;
                    string excelsContractFolder = ".\\Excel\\" + FolderName + "\\" + textBox7.Text;

                    if (Path.GetExtension(fn).ToLower() == ".pdf")
                    {

                        if (!Directory.Exists(subPdfFolder))
                        {
                            Directory.CreateDirectory(subPdfFolder);
                        }

                        if (!Directory.Exists(subdirpdf))
                        {
                            Directory.CreateDirectory(subdirpdf);
                        }
                        if (!Directory.Exists(PDFSContractFolder))
                        {
                            Directory.CreateDirectory(PDFSContractFolder);
                        }
                        if (Directory.GetFiles(PDFSContractFolder, fn,SearchOption.AllDirectories).FirstOrDefault()!= null)
                        {
                            path = String.Format(PDFSContractFolder + "\\{0}", string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn)));
                        }
                        else
                        {
                            path = String.Format(PDFSContractFolder + "\\{0}", fn);
                        }

                        MessageBox.Show(f + ",,,,," + fn);
                        File.Copy(file, path, true);
                        metroButtonsMulti.Text = path;
                        insertMultiData(path, FolderName);
                        report3loc = path;
                    }
                    else if (ImageExtensions.Contains(Path.GetExtension(fn).ToLower()) || ImageExtensions.Contains(Path.GetExtension(fn).ToUpper()))
                    {
                        if (!Directory.Exists(imagesSubFol))
                        {
                            Directory.CreateDirectory(imagesSubFol);
                        }

                        if (!Directory.Exists(imagesSubDir))
                        {
                            Directory.CreateDirectory(imagesSubDir);
                        }
                        if (!Directory.Exists(imagesContractFolder))
                        {
                            Directory.CreateDirectory(imagesContractFolder);
                        }

                        if (Directory.GetFiles(imagesContractFolder, fn,SearchOption.AllDirectories).FirstOrDefault()!= null)
                        {
                            path = String.Format(imagesContractFolder + "\\{0}", string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn)));
                        }
                        else
                        {
                            path = String.Format(imagesContractFolder + "\\{0}", fn);
                        }

                        //MessageBox.Show(f + ",,,,," + fn);
                        File.Copy(file, path, true);
                        metroButtonsMulti.Text = path;
                        insertMultiData(path,FolderName);
                        report3loc = path;
                    }
                    else if (ExcelExtensions.Contains(Path.GetExtension(fn).ToLower()) || ExcelExtensions.Contains(Path.GetExtension(fn).ToUpper()))
                    {
                        if (!Directory.Exists(ExcelParentFolder))
                        {
                            Directory.CreateDirectory(ExcelParentFolder);
                        }

                        if (!Directory.Exists(ExcelSubFolder))
                        {
                            Directory.CreateDirectory(ExcelSubFolder);
                        }
                        if (!Directory.Exists(excelsContractFolder))
                        {
                            Directory.CreateDirectory(excelsContractFolder);
                        }
                        if (Directory.GetFiles(excelsContractFolder, fn, SearchOption.AllDirectories).FirstOrDefault() != null)
                        {
                            MessageBox.Show(file);
                            path = String.Format(excelsContractFolder + "\\{0}", (string.Format(Path.GetFileNameWithoutExtension(file) + DateTime.Now.ToString("dddd_MM_dd_yyyy HH_mm_ss") + Path.GetExtension(fn))));
                        }
                        else
                        {
                            path = String.Format(excelsContractFolder + "\\{0}", fn);
                        }
                        File.Copy(file, path, true);
                        insertMultiData( path, FolderName);

                        report3loc = path;
                        metroButtonsMulti.Text = path;
                    }

                    else
                    {
                        MessageBox.Show("يجب رفع صورة او بي دي اف او اكسل");
                    }
                }
            }
            else
            {
                MessageBox.Show("ادخل رقم العقد");

            }
        }
        public void filesPrep(String FN, Object sender)
        {
            try
            {
                OpenFileDialog ofdMultiselect = new OpenFileDialog();
                ofdMultiselect.Multiselect = true;
                ofdMultiselect.Filter = "Select needed Files |*.jpg; *.png; *.pdf";
                ofdMultiselect.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                if (ofdMultiselect.ShowDialog() == DialogResult.OK)
                {

                    string textbox7Text = textBox7.Text;
                    string FolderName = FN.Trim();
                    MultiSelect(((Button)sender), FolderName, ofdMultiselect);

                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
            }
            finally{
                ((Button)sender).Text = FN;
            }
        }
        private void metroButton50_Click(object sender, EventArgs e)
        {
            
            
            filesPrep("تقرير السلامة الانشائية", sender);
        }

        private void metroButton56_Click(object sender, EventArgs e)
        {
            filesPrep("مذكرات التجاوز و المخفض و الملغى",sender);

        }

        


        private void metroButton54_Click(object sender, EventArgs e)
        {
           filesPrep(((Button)sender).Text,sender);

        }

        private void metroButton32_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "القيمة التعاقدية";

            //FileUpload(metroButton32, metroButton32.Text, );
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton38_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "الختامي المنتظر";
            //FileUpload(metroButton38, metroButton38.Text, "الختامي المنتظر");
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton37_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "اخرمستخلص";

            //FileUpload(metroButton37, metroButton37.Text, );
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton36_Click(object sender, EventArgs e)
        {
            String RequestedFolder = "الوفر";

            //FileUpload(metroButton36, metroButton36.Text, "الوفر");
            filesPrep(RequestedFolder, sender);

        }

        private void metroButton25_Click(object sender, EventArgs e)
        {
            FileRea(metroButton26.Text, "البرنامج الزمني");
        }

        private void metroButton39_Click(object sender, EventArgs e)
        {
            FileRea(metroButton40.Text, "طلبات الاستلام");

        }

        private void metroButton43_Click(object sender, EventArgs e)
        {
            FileRea(metroButton46.Text, "الاعتمادات المخصصة");

        }

        private void metroButton42_Click(object sender, EventArgs e)
        {
            FileRea(metroButton45.Text, "اوامر الموقع");

        }

        private void metroButton41_Click(object sender, EventArgs e)
        {
            FileRea(metroButton44.Text, "جوابات الادارة");

        }

        private void metroButton49_Click(object sender, EventArgs e)
        {
            FileRea(metroButton52.Text, "الميزانية الشبكية");

        }

        private void metroButton48_Click(object sender, EventArgs e)
        {

        }

        private void metroButton47_Click(object sender, EventArgs e)
        {
            FileRea(metroButton50.Text, "تقرير السلامة الانشائية");
        }

        private void metroButton55_Click(object sender, EventArgs e)
        {
            FileRea(metroButton56.Text, "مذكرات التجاوز و المخفض و الملغى");

        }

        private void metroButton53_Click(object sender, EventArgs e)
        {
            FileRea(metroButton54.Text, "لوحات المشروع + Asbuilt");

        }
        private void metroDateTime1_ValueChanged(object sender, EventArgs e)
        {
            datechanged = true;
        }

        private void label6_DragDrop(object sender, DragEventArgs e)
        {

        }

        private void htmlLabel3_Click(object sender, EventArgs e)
        {

        }

        private void metroTabPage1_Click(object sender, EventArgs e)
        {

        }

        private void metroTextBox11_Click(object sender, EventArgs e)
        {
            //bd.SelectSums(Paid, restOfMoneySpecified, savings, shortage, FinancialStatement, exchangeRate, rateOfImplementation);

        }

        private void RequiredDependency_TextChanged(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
            pdf PDFS = new pdf((sender as Button).Text);
            PDFS.ShowDialog();

        }

        private void button7_Click(object sender, EventArgs e)
        {
            BuildsData buildsData = new BuildsData((sender as Button).Text);
            buildsData.Location = this.Location;
            buildsData.StartPosition = FormStartPosition.Manual;
            buildsData.FormClosing += delegate { this.Show(); };
            buildsData.Show();
            this.Hide();
        }


        private void phraseName_TextChanged(object sender, EventArgs e)
        {
            //bd.SelectSums(Paid, restOfMoneySpecified, savings, shortage, FinancialStatement, exchangeRate, rateOfImplementation, phraseName.Text);
            //PT.phrasesName = phraseName.Text;

            DataSet DSPTOP = PT.selectOnePhraseData(PT);
            if (DSPTOP.Tables[0].Rows.Count > 0)
            {

                DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];

                DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

            }

        }
        private void AddPhrase_Click(object sender, EventArgs e)
        {
            PT.megaProjName = megaProjectNameText.Text;
            PT.phrasesName = phName.Text;
            PT.phrasesNum = int.Parse(phraseNum.Text);
            PT.TimeStrategy = phTimeStrategy.Text;
            PT.phraseComponents = phrasesComponents.Text;
            PT.PhraseExchangeRate = null;
            PT.PhraseFinancialStatement = null;
            PT.PhraseRequiredDependency = null;
            PT.PhrasePaid = null;
            PT.PhraserestOfMoneySpecified = null;
            PT.Phraseshortage = null;
            PT.PhraseSavings = null;
            PT.PhrasesAllContractedValue = null;
            PT.PhraseImplementedRate = null;
            PT.PhraseImplementedRateAccordingToFinancialStat = null;

            PT.insertData(PT);
            Thread.Sleep(2000);
            phraseNum.Text = "";
            phTimeStrategy.Text = "رفع البرنامج الزمني للمرحلة";
            phrasesComponents.Text = "مكونات المشروع";
            phName.Text = "";

        }
        String[] PhrasesArray = new String[] { };
        public void AddDataToDropDownList()
        {
            PT.megaProjName = megaProjectNameText.Text;

            DataSet DSPT = PT.selectData(PT);
            MessageBox.Show(DSPT.ToString());
            BuildPhrases.Items.Clear();
            foreach (DataRow DRPT in DSPT.Tables[0].Rows)
            {
                //MessageBox.Show(DRPT["phrasesName"].ToString());
                BuildPhrases.Items.Add(DRPT["phrasesName"]);

            }


        }
        megaProj mP = new megaProj();
        private void button9_Click_1(object sender, EventArgs e)
        {
            int datacount = PT.checkCount(Sessions.SessionData.megaProjectName);
            int newPhrasescount = phraseNum.Text == "" ? 0 : int.Parse(phraseNum.Text);

            if (newPhrasescount > datacount)
            {
                mP.megaProjectName = megaProjectNameText.Text;
                mP.megaProjectFundemental = null;
                mP.noOfPhrases = newPhrasescount;
                mP.updateData(mP);
            }
        }

        private void phTimeStrategy_Click(object sender, EventArgs e)
        {
            FileUpload(phTimeStrategy, "رفع البرنامج الزمني للمرحلة", String.Format("المراحل" + phName.Text.ToString()));



        }

        private void phraseUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                PT.TimeStrategy = phTimeStrategy.Text == "رفع البرنامج الزمني للمرحلة" || phTimeStrategy.Text == "" ? null : phTimeStrategy.Text;
                PT.megaProjName = megaProjectNameText.Text;
                PT.phrasesName = phName.Text == "" ? null : phName.Text;
                PT.phrasesNum = phraseNum.Text == "" ? null : (int?)int.Parse(phraseNum.Text.Trim().ToString());
                PT.phraseComponents = phrasesComponents.Text == "مكونات المشروع" || phrasesComponents.Text == "" ? null : phTimeStrategy.Text;
                PT.PhraseFinancialStatement = null;//String.IsNullOrEmpty(FinancialStatement.Text) || FinancialStatement.Text == "0" || FinancialStatement.Text == "0.0" ? null : (double?)Convert.ToDouble(FinancialStatement.Text);
                PT.PhraseRequiredDependency = null;// String.IsNullOrEmpty(RequiredDependency.Text) || RequiredDependency.Text == "0" || RequiredDependency.Text == "0.0" ? null : (double?)Convert.ToDouble(RequiredDependency.Text);
                PT.PhrasePaid = null; // String.IsNullOrEmpty(Paid.Text) || Paid.Text == "0" || Paid.Text == "0.0" ? null : (double?)Convert.ToDouble(Paid.Text);
                PT.PhraserestOfMoneySpecified = null;//String.IsNullOrEmpty(restOfMoneySpecified.Text) || restOfMoneySpecified.Text == "0" || restOfMoneySpecified.Text == "0.0" ? null : (double?)Convert.ToDouble(restOfMoneySpecified.Text);
                PT.Phraseshortage = null;// String.IsNullOrEmpty(shortage.Text) || shortage.Text == "0" || shortage.Text == "0.0" ? null : (double?)Convert.ToDouble(shortage.Text);
                PT.PhraseSavings = null;// String.IsNullOrEmpty(savings.Text) || savings.Text == "0" || savings.Text == "0.0" ? null : (double?)Convert.ToDouble(savings.Text);
                PT.PhraseExchangeRate = null;// String.IsNullOrEmpty(exchangeRate.Text) || exchangeRate.Text == "0" || exchangeRate.Text == "0.0" ? null : (float?)Convert.ToDouble(exchangeRate.Text);
                PT.PhrasesAllContractedValue = null;// String.IsNullOrEmpty(AllContractedValue.Text) || AllContractedValue.Text == "0" || AllContractedValue.Text == "0.0" ? null : (double?)Convert.ToDouble(AllContractedValue.Text);
                PT.PhraseImplementedRate = null;// String.IsNullOrEmpty(rateOfImplementation.Text) || rateOfImplementation.Text == "0" || rateOfImplementation.Text == "0.0" ? null : (float?)Convert.ToDouble(rateOfImplementation.Text);
                PT.PhraseImplementedRateAccordingToFinancialStat = null;// String.IsNullOrEmpty(rateOfImplementationAcorrdingToFundemental.Text) || rateOfImplementationAcorrdingToFundemental.Text == "0" || rateOfImplementationAcorrdingToFundemental.Text == "0.0" ? null : (float?)Convert.ToDouble(rateOfImplementationAcorrdingToFundemental.Text);

                PT.updateData(PT);
                Thread.Sleep(2000);
                phraseNum.Text = "";
                phTimeStrategy.Text = "رفع البرنامج الزمني للمرحلة";
                phrasesComponents.Text = "مكونات المشروع";
                phName.Text = "";
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
            }
        }

        private void phrasesComponents_Click(object sender, EventArgs e)
        {
            FileUpload(phrasesComponents, "مكونات المشروع", String.Format("المراحل"));

        }

        public void MegaProjectFinancialStatement()
        {
            PT.SelectSums(ProjectPaid, ProjectrestOfMoneySpecified, megaProjsavings, Projectshortage, MegProjFinancialStatement, megaProjexchangeRate, megaProjrateOfImplementation, megaProjAllContractedValue, Sessions.SessionData.megaProjectName);
            mP.megaProjectName = Sessions.SessionData.megaProjectName;
            DataSet DSMPOP = mP.selectOneMegaProjData(mP);
            if (DSMPOP.Tables[0].Rows.Count > 0)
            {

                DataRow DRMPOP = DSMPOP.Tables[0].Rows[0];
                MegProjFinancialStatement.Text = DRMPOP["megaProjectFundemental"].ToString();
                MegaProjDurationProgram.Text = DRMPOP["MegaProjTimeStrategy"].ToString();
                MegaProjGetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRMPOP["MegaProjComponents"].ToString();

            }
        }
        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox1.SelectedItem != null)
            {
                bd.SelectSums(Paid, restOfMoneySpecified, savings, shortage, FinancialStatement, exchangeRate, rateOfImplementation, AllContractedValue, listBox1.SelectedItem.ToString());
                PT.phrasesName = listBox1.SelectedItem.ToString();

                DataSet DSPTOP = PT.selectOnePhraseData(PT);
                if (DSPTOP.Tables[0].Rows.Count > 0)
                {

                    DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];
                    if (!String.IsNullOrEmpty(FinancialStatement.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
                    {
                        rateOfImplementationAcorrdingToFundemental.Text = Convert.ToString((Convert.ToDouble(FinancialStatement.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100);
                    }
                    DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                    GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

                }
            }
        }
        protected void OnKeyDown(Object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = true;
                //MessageBox.Show("Are you sure to update this item ??",
                //                     "Confirm Delete!!",
                //                     MessageBoxButtons.YesNo);
                //var confirmResult = MessageBox.Show("Are you sure to update this item ??",
                //                     "Confirm Delete!!",
                //                     MessageBoxButtons.YesNo);
                //if (confirmResult == DialogResult.Yes)
                //{
                MessageBox.Show("Are you sure to update this item ??");
                //                     
                PT.PhraseFinancialStatement = String.IsNullOrEmpty(FinancialStatement.Text) ? null : (double?)Convert.ToDouble(FinancialStatement.Text);
                PT.PhraseRequiredDependency = String.IsNullOrEmpty(RequiredDependency.Text) ? null : (double?)Convert.ToDouble(RequiredDependency.Text);
                PT.PhrasePaid = String.IsNullOrEmpty(Paid.Text) ? null : (double?)Convert.ToDouble(Paid.Text);
                PT.PhraserestOfMoneySpecified = String.IsNullOrEmpty(restOfMoneySpecified.Text) ? null : (double?)Convert.ToDouble(restOfMoneySpecified.Text);
                PT.Phraseshortage = String.IsNullOrEmpty(shortage.Text) ? null : (double?)Convert.ToDouble(shortage.Text);
                PT.PhraseSavings = String.IsNullOrEmpty(savings.Text) ? null : (double?)Convert.ToDouble(savings.Text);
                PT.PhraseExchangeRate = String.IsNullOrEmpty(exchangeRate.Text) ? null : (float?)Convert.ToDouble(exchangeRate.Text);
                PT.PhrasesAllContractedValue = String.IsNullOrEmpty(AllContractedValue.Text) ? null : (double?)Convert.ToDouble(AllContractedValue.Text);
                PT.PhraseImplementedRate = String.IsNullOrEmpty(rateOfImplementation.Text) ? null : (float?)Convert.ToDouble(rateOfImplementation.Text);
                PT.PhraseImplementedRateAccordingToFinancialStat = String.IsNullOrEmpty(rateOfImplementationAcorrdingToFundemental.Text) ? null : (float?)Convert.ToDouble(rateOfImplementationAcorrdingToFundemental.Text);

                //}
                //else
                //{

                //}
            }
            else if (e.KeyCode == Keys.Tab)
            {
                SelectNextControl(ActiveControl, true, true, true, true);
            }
        }

        private void metroGrid1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //try
            //{
            //    DataGridViewRow dt = metroGrid1.SelectedRows[0];
            //    dt.Cells["totalPrice"].Value = double.Parse(dt.Cells["amount"].Value.ToString()) * double.Parse(dt.Cells["priceOfUnit"].Value.ToString());
            //    dt.Cells["totaldeduction"].Value = double.Parse(dt.Cells["priceOfUnit"].Value.ToString()) * double.Parse(dt.Cells["ConfirmedDeduction"].Value.ToString());
            //    dt.Cells["DeductionPrice"].Value = double.Parse(dt.Cells["priceOfUnit"].Value.ToString()) * double.Parse(dt.Cells["deduction"].Value.ToString());

            //}
            //catch (Exception ex)
            //{

            //}

        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {
            home h = new home();
            this.Hide();
            Sessions.SessionData.megaProjectName.Equals(null);
            h.Show();

        }

        private void button8_Click_1(object sender, EventArgs e)
        {
            //MessageBox.Show("Are you sure to update this item ??",
            //                     "Confirm Delete!!",
            //                     MessageBoxButtons.YesNo);
            var confirmResult = MessageBox.Show("Are you sure to update this item ??",
                                 "Confirm Delete!!",
                                 MessageBoxButtons.YesNo);
            if (confirmResult == DialogResult.Yes)
            {
                //
                PT.phrasesName = listBox1.SelectedItem.ToString();
                PT.TimeStrategy = String.IsNullOrEmpty(DurationProgram.Text) || DurationProgram.Text == "البرنامج الزمني" ? null : DurationProgram.Text;
                PT.phraseComponents = String.IsNullOrEmpty(GetPhrasesData.Text) || GetPhrasesData.Text == "مكونات المشروع" ? null : GetPhrasesData.Text;
                PT.phrasesNum = null;
                PT.megaProjName = Sessions.SessionData.megaProjectName;
                PT.PhraseFinancialStatement = String.IsNullOrEmpty(FinancialStatement.Text) || FinancialStatement.Text == "0" || FinancialStatement.Text == "0.0" ? null : (double?)Convert.ToDouble(FinancialStatement.Text);
                PT.PhraseRequiredDependency = String.IsNullOrEmpty(RequiredDependency.Text) || RequiredDependency.Text == "0" || RequiredDependency.Text == "0.0" ? null : (double?)Convert.ToDouble(RequiredDependency.Text);
                PT.PhrasePaid = String.IsNullOrEmpty(Paid.Text) || Paid.Text == "0" || Paid.Text == "0.0" ? null : (double?)Convert.ToDouble(Paid.Text);
                PT.PhraserestOfMoneySpecified = String.IsNullOrEmpty(restOfMoneySpecified.Text) || restOfMoneySpecified.Text == "0" || restOfMoneySpecified.Text == "0.0" ? null : (double?)Convert.ToDouble(restOfMoneySpecified.Text);
                PT.Phraseshortage = String.IsNullOrEmpty(shortage.Text) || shortage.Text == "0" || shortage.Text == "0.0" ? null : (double?)Convert.ToDouble(shortage.Text);
                PT.PhraseSavings = String.IsNullOrEmpty(savings.Text) || savings.Text == "0" || savings.Text == "0.0" ? null : (double?)Convert.ToDouble(savings.Text);
                PT.PhraseExchangeRate = String.IsNullOrEmpty(exchangeRate.Text) || exchangeRate.Text == "0" || exchangeRate.Text == "0.0" || exchangeRate.Text == "NaN" ? null : (float?)float.Parse(exchangeRate.Text);
                PT.PhrasesAllContractedValue = String.IsNullOrEmpty(AllContractedValue.Text) || AllContractedValue.Text == "0" || AllContractedValue.Text == "0.0" ? null : (double?)Convert.ToDouble(AllContractedValue.Text);
                PT.PhraseImplementedRate = String.IsNullOrEmpty(rateOfImplementation.Text) || rateOfImplementation.Text == "0" || rateOfImplementation.Text == "0.0" ? null : (float?)Convert.ToDouble(rateOfImplementation.Text);
                PT.PhraseImplementedRateAccordingToFinancialStat = String.IsNullOrEmpty(rateOfImplementationAcorrdingToFundemental.Text) || rateOfImplementationAcorrdingToFundemental.Text == "0" || rateOfImplementationAcorrdingToFundemental.Text == "0.0" ? null : (float?)Convert.ToDouble(rateOfImplementationAcorrdingToFundemental.Text);
                PT.updateDataForAccess(PT);
            }
            else
            {

            }
        }

        //private void OnKeyDown(object sender, KeyEventArgs e)
        //{
        //    if (e.KeyCode == Keys.Enter)
        //    {
        //        SelectNextControl(ActiveControl, true, true, true, true);
        //        e.Handled = true;
        //    }
        //}
        public void GetMetaData()
        {
            DataSet DSMPSA = mP.GetAllmegaProjData();

        }

        private void FinancialStatement_TextChanged(object sender, EventArgs e)
        {
            PT.PhraseFinancialStatement = String.IsNullOrEmpty(FinancialStatement.Text) || FinancialStatement.Text == "0" || FinancialStatement.Text == "0.0" ? null : (double?)Convert.ToDouble(FinancialStatement.Text);
            if (!String.IsNullOrEmpty(FinancialStatement.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
            {
                rateOfImplementationAcorrdingToFundemental.Text = ((Convert.ToDouble(FinancialStatement.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100).ToString();
            }
        }

        private void MegProjFinancialStatement_TextChanged(object sender, EventArgs e)
        {

            mP.MegaProjFinancialStatement = String.IsNullOrEmpty(MegProjFinancialStatement.Text) || MegProjFinancialStatement.Text == "0" || MegProjFinancialStatement.Text == "0.0" ? null : (double?)Convert.ToDouble(MegProjFinancialStatement.Text);
            if (!String.IsNullOrEmpty(FinancialStatement.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
            {
                try
                {
                    rateOfImplementationAcorrdingToFundemental.Text = ((Convert.ToDouble(FinancialStatement.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100).ToString();
                }
                catch (Exception ex)
                {
                }
            }
        }

        private void metroTabPage3_Click(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(textBox2.Text) && !String.IsNullOrEmpty(textBox11.Text))
            {
                try
                {
                    textBox6.Text = ((Convert.ToDouble(textBox11.Text) * Convert.ToDouble(textBox2.Text)) / 100).ToString();
                }
                catch (Exception ex)
                {

                }
            }
        }

        private void BuildPhrases_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (BuildPhrases.SelectedItem != null)
            {
                bd.SelectSums(Paid, restOfMoneySpecified, savings, shortage, FinancialStatement, exchangeRate, rateOfImplementation, AllContractedValue, BuildPhrases.SelectedItem.ToString());
                PT.phrasesName = BuildPhrases.SelectedItem.ToString();

                DataSet DSPTOP = PT.selectOnePhraseData(PT);
                if (DSPTOP.Tables[0].Rows.Count > 0)
                {

                    DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];
                    if (!String.IsNullOrEmpty(textBox25.Text) && !String.IsNullOrEmpty(FinancialStatement.Text))
                    {
                        textBox2.Text = Convert.ToString((Convert.ToDouble(textBox25.Text) / Convert.ToDouble(FinancialStatement.Text)) * 100);
                    }
                    FinancialStatement.Text = DRPTOP["PhraseFinancialStatement"].ToString();
                    DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                    GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

                }
            }
        }

        private void textBox25_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!String.IsNullOrEmpty(textBox25.Text) && !String.IsNullOrEmpty(FinancialStatement.Text))
                {
                    try
                    {
                        textBox2.Text = ((Convert.ToDouble(textBox25.Text) / Convert.ToDouble(FinancialStatement.Text)) * 100).ToString();
                    }
                    catch (Exception ex)
                    {

                    }
                }

                if (!String.IsNullOrEmpty(textBox27.Text) && !String.IsNullOrWhiteSpace(textBox27.Text))
                {
                    try
                    {
                        textBox28.Text = (Convert.ToDouble(textBox25.Text) - Convert.ToDouble(textBox27.Text)).ToString();
                    }
                    catch (Exception ex)
                    {

                    }
                }
                //if (!String.IsNullOrEmpty(textBox30.Text) && !String.IsNullOrWhiteSpace(textBox30.Text))
                //{
                //    textBox30.Text = (Convert.ToDouble(textBox25.Text) - Convert.ToDouble(textBox30.Text)).ToString();
                //}
            }
            catch (Exception ex)
            {
            }
        }

        private void textBox11_TextChanged(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(textBox2.Text) && !String.IsNullOrEmpty(textBox11.Text))
            {
                textBox6.Text = ((Convert.ToDouble(textBox11.Text) / Convert.ToDouble(textBox2.Text)) / 100).ToString();

            }
        }

        public double sumOfGrids()
        {
            double SumsOfTotalDeductedValue = 0;
            foreach (DataGridViewRow DGVR in metroGrid2.Rows)
            {
                try
                {
                    if (!String.IsNullOrEmpty(DGVR.Cells["TotalDeductionsVals"].Value.ToString()))
                    {
                        SumsOfTotalDeductedValue += Convert.ToDouble(DGVR.Cells["TotalDeductionsVals"].Value.ToString());
                    }
                }
                catch (Exception ex)
                {

                }

            }
            return SumsOfTotalDeductedValue;
        }

        private void metroGrid2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void metroGrid2_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            textBox24.Text = sumOfGrids().ToString("0.####");
            try
            {
                DataGridViewRow dt = metroGrid2.SelectedRows[0];
                dt.Cells["TotalDeductionsVals"].Value = double.Parse(dt.Cells["amountN"].Value.ToString()) * double.Parse(dt.Cells["pricePerUnitN"].Value.ToString());
                dt.Cells["DeductionPriceN"].Value = double.Parse(dt.Cells["pricePerUnitN"].Value.ToString()) * double.Parse(dt.Cells["ConfirmedDeductionN"].Value.ToString());
                dt.Cells["validDeductionN"].Value = double.Parse(dt.Cells["pricePerUnitN"].Value.ToString()) * double.Parse(dt.Cells["DeductionN"].Value.ToString());

            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
            }
        }


        private void listBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox4.SelectedItem != null)
            {
                bd.SelectPartsSums(SpecializedWorksPaids, SpecializedWorksROMS, SpecializedWorksSavings, SpecializedWorksShortage, SpecializedWorksFinancialStatement, SpecializedWorksExchangeRate, SpecializedWorksrateOfImplementation, SWAllContractedFunds, listBox4.SelectedItem.ToString(), Projectsavings.SelectedTab.Text);
                PT.phrasesName = listBox4.SelectedItem.ToString();

                DataSet DSPTOP = PT.selectOnePhraseData(PT);
                if (DSPTOP.Tables[0].Rows.Count > 0)
                {

                    DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];
                    if (!String.IsNullOrEmpty(SpecializedWorksFinancialStatement.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
                    {
                        SWrateOfImplementationAcorrdingToFundemental.Text = Convert.ToString((Convert.ToDouble(SpecializedWorksFinancialStatement.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100);
                    }
                    //DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                    //GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

                }
            }
        }
        public void getAllDataInGridView1() {
            string selectQuery = "select * from deductionTable";
            OleDbConnection SDQOC = new OleDbConnection(myconnecting);
            OleDbCommand SDCOC = new OleDbCommand(selectQuery,SDQOC);
            OleDbDataAdapter ODAOCSQ = new OleDbDataAdapter(SDCOC);
            DataSet ds = new DataSet();
            SDQOC.Open();
            ODAOCSQ.Fill(ds);
            foreach (DataRow SDDR in ds.Tables[0].Rows)
            {

                metroGrid1.Rows.Add(SDDR["ID"],SDDR["ProjectCode"],SDDR["type"],SDDR["PricePerUnit"],SDDR["Importer"],SDDR["amount"]
                    ,SDDR["totalValue"],SDDR["Deduction"],SDDR["DeductionPrice"],
                    SDDR["ConfirmedDeductionVal"],SDDR["DeductionPrice"],SDDR["notes"]);

            }
            SDQOC.Close();
        }
        private void listBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox2.SelectedItem != null)
            {
                bd.SelectPartsSums(NPaids, NROM, NSavings, NShortage, NFinancialStatement, NExchangeOfRate, NROI, NAllOfContracted, listBox2.SelectedItem.ToString(), Projectsavings.SelectedTab.Text);
                PT.phrasesName = listBox2.SelectedItem.ToString();

                DataSet DSPTOP = PT.selectOnePhraseData(PT);
                if (DSPTOP.Tables[0].Rows.Count > 0)
                {

                    DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];
                    if (!String.IsNullOrEmpty(NFinancialStatement.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
                    {
                        NROIATFS.Text = Convert.ToString((Convert.ToDouble(NFinancialStatement.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100);
                    }
                    // DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                    // GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

                }
            }
        }

        private void listBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox3.SelectedItem != null)
            {
                bd.SelectPartsSums(CPaids, CROM, CSavings, CShortage, CFinancialStatements, CExchangeOfRate, CROI, CAllOfContracted, listBox3.SelectedItem.ToString(), Projectsavings.SelectedTab.Text);
                PT.phrasesName = listBox3.SelectedItem.ToString();

                DataSet DSPTOP = PT.selectOnePhraseData(PT);
                if (DSPTOP.Tables[0].Rows.Count > 0)
                {

                    DataRow DRPTOP = DSPTOP.Tables[0].Rows[0];
                    if (!String.IsNullOrEmpty(CFinancialStatements.Text) && !String.IsNullOrEmpty(MegProjFinancialStatement.Text))
                    {
                        CROIATFS.Text = Convert.ToString((Convert.ToDouble(CFinancialStatements.Text) / Convert.ToDouble(MegProjFinancialStatement.Text)) * 100);
                    }
                    //DurationProgram.Text = DRPTOP["TimeStrategy"].ToString();
                    // GetPhrasesData.Text = /*DRPTOP["phraseComponents"] ==null? "" :*/ DRPTOP["phraseComponents"].ToString();

                }
            }

        }

        private void textBox47_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox26_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //if (!String.IsNullOrEmpty(textBox27.Text) && !String.IsNullOrWhiteSpace(textBox27.Text))
                //{
                //    textBox28.Text = (Convert.ToDouble(textBox27.Text) - Convert.ToDouble(textBox30.Text)).ToString();
                //}
                if (!String.IsNullOrEmpty(textBox27.Text) && !String.IsNullOrWhiteSpace(textBox27.Text))
                {
                    try
                    {
                        textBox30.Text = (Convert.ToDouble(textBox27.Text) - Convert.ToDouble(textBox26.Text)).ToString();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        private void textBox27_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!String.IsNullOrEmpty(textBox25.Text) && !String.IsNullOrWhiteSpace(textBox25.Text))
                {
                    try
                    {
                        textBox28.Text = (Convert.ToDouble(textBox25.Text) - Convert.ToDouble(textBox27.Text)).ToString();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);

                    }
                }
                if (!String.IsNullOrEmpty(textBox26.Text) && !String.IsNullOrWhiteSpace(textBox26.Text))
                {
                    try
                    {
                        textBox30.Text = (Convert.ToDouble(textBox27.Text) - Convert.ToDouble(textBox26.Text)).ToString();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }
        }
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            base.OnFormClosing(e);

            if (e.CloseReason == CloseReason.WindowsShutDown) return;

            // Confirm user wants to close
            switch (MessageBox.Show(this, "Are you sure you want to close?", "Closing", MessageBoxButtons.YesNo))
            {
                case DialogResult.No:
                    e.Cancel = true;
                    break;
                default:
                    Application.ExitThread();
                    Application.Exit();
                    break;
            }
        }
    }
}
//string userName = Environment.UserName;
